<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vulnerability on theevilbit blog</title>
    <link>https://theevilbit.github.io/tags/vulnerability/</link>
    <description>Recent content in Vulnerability on theevilbit blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://theevilbit.github.io/tags/vulnerability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The diskarbitrationd and storagekitd Audit Story Part 2</title>
      <link>https://theevilbit.github.io/posts/macos-audit-story-part2/</link>
      <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/macos-audit-story-part2/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Kandji&amp;rsquo;s Threat Research team recently performed an audit on the macOS diskarbitrationd and storagekitd system daemons, uncovering several vulnerabilities. Our team reported all of them to Apple through their responsible disclosure program, and as these are fixed now, we are releasing the details in this blog series - this is part two.&lt;/p&gt;&#xA;&lt;p&gt;In part one we covered a vulnerability which impacted the diskarbitrationd system daemon and allowed attacks to either escape the sandbox or escalate our privileges through user file systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The diskarbitrationd and storagekitd Audit Story Part 1</title>
      <link>https://theevilbit.github.io/posts/macos-audit-story-part1/</link>
      <pubDate>Fri, 08 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/macos-audit-story-part1/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The Kandji team is always looking out for how to help keep your devices secure. In line with that, our Threat Research team performed an audit on the macOS diskarbitrationd and storagekitd system daemons, uncovering several vulnerabilities such as sandbox escapes, local privilege escalations, and TCC bypasses. Our team reported all of them to Apple through their responsible disclosure program, and as these are fixed now, we are releasing the details.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dock Tile Plugins Could Be Used to Escalate Privileges</title>
      <link>https://theevilbit.github.io/posts/dock-tile-plugins-persistence/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/dock-tile-plugins-persistence/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;I recently came across a persistence feature in macOS that&amp;rsquo;s tied to Dock tile plugins.&lt;/p&gt;&#xA;&lt;p&gt;Dock tiles are the small icons that appear on your Dock when an application runs. Plugins for these Dock tiles have been available since macOS Snow Leopard (10.6). In its developer documentation, Apple says about them:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A set of methods implemented by plug-ins&amp;hellip;allow an app’s Dock tile to be customized while the app is not running.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2023-40424 - How Malware Can Bypass Transparency Consent and Control</title>
      <link>https://theevilbit.github.io/posts/cve-2023-40424/</link>
      <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2023-40424/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CVE-2023-40424 is a vulnerability that allows a root-level user to create a new user with a custom Transparency Consent and Control (TCC) database in macOS, which can then be used to access other users’ private data.&lt;/p&gt;&#xA;&lt;p&gt;First discovered back in 2022, the vulnerability was fixed by Apple in 2023 in macOS Sonoma’s initial release. But it was not fixed in earlier versions of macOS—one more reason users and admins should update their Mac computers to Sonoma.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Apple Mitigates Vulnerabilities in Installer Scripts</title>
      <link>https://theevilbit.github.io/posts/apple-mitigates-vulnerabilities-installer-scripts/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/apple-mitigates-vulnerabilities-installer-scripts/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Vulnerabilities are hot topics inside the world of security research and—because of their potentially dramatic impacts—outside as well. Unfortunately, the strategies and tactics that companies like Apple take to prevent specific vulnerabilities—or even entire families of exploits—typically attract less attention. But the fact is that engineering high-impact mitigations is typically more challenging than finding a single vulnerability.&lt;/p&gt;&#xA;&lt;p&gt;In this post, we’ll look at Apple&amp;rsquo;s recent efforts to mitigate an entire class of installer-script vulnerabilities. We will cover:&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2022-22655 - TCC - Location Services Bypass</title>
      <link>https://theevilbit.github.io/posts/cve-2022-22655/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2022-22655/</guid>
      <description>&lt;p&gt;This is a quick blogpost about a vulnerability I covered in our &lt;a href=&#34;https://www.blackhat.com/eu-22/briefings/schedule/index.html#knockout-win-against-tcc----new-ways-to-bypass-your-macos-privacy-mechanisms-29272&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Black Hat Europe 2022 talk&lt;/a&gt; with &lt;a href=&#34;https://twitter.com/_r3ggi&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wojciech Regula&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In contrary to what people would expect, clients which can access location services are not maintained in one of the TCC databased, but in a separate location, and it&amp;rsquo;s maintained by locationd. This has been also recently covered by Howard Oakley, in his &lt;a href=&#34;https://eclecticlight.co/2023/02/10/privacy-what-tcc-does-and-doesnt/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Privacy: what TCC does and doesn’t&lt;/a&gt; blogpost.&lt;/p&gt;&#xA;&lt;p&gt;TCC&amp;rsquo;s location services allowed client list is located inside &lt;code&gt;/var/db/locationd/clients.plist&lt;/code&gt;. This file is protected by the Sandbox/TCC, thus we can&amp;rsquo;t modify it, and add new client, even if we have root privileges.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2022-32929 - Bypass iOS backup&#39;s TCC protection</title>
      <link>https://theevilbit.github.io/posts/cve-2022-32929/</link>
      <pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2022-32929/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Normally, when a users backup their iOS device, the backup is saved into &lt;code&gt;~/Library/Application Support/MobileSync/Backup&lt;/code&gt; directory. The &lt;code&gt;MobileSync&lt;/code&gt; directory is properly protected by TCC, as the backup can contain photos, contact information, everything from the iOS device, and it might be unencrypted, so this is a whole lot of private information. It&amp;rsquo;s only accessible with Full Disk Access rights.&lt;/p&gt;&#xA;&lt;p&gt;The issue is that an attacker can invoke the &lt;code&gt;AppleMobileBackup&lt;/code&gt; utility and make a backup to a custom location. Thus completely bypassing the protected backup location.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2017-2533 - The details behind</title>
      <link>https://theevilbit.github.io/posts/cve-2017-2533/</link>
      <pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2017-2533/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://support.apple.com/en-us/HT207797&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2017-2533&lt;/a&gt;  was part of a chain of vulnerabilities, used at pwn2own 2017 found by the phoenhex team. They wrote a blogpost about it &lt;a href=&#34;https://phoenhex.re/2017-06-09/pwn2own-diskarbitrationd-privesc&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. This vulnerability led me to find CVE-2022-32780, which I detailed at &lt;a href=&#34;https://www.blackhat.com/asia-22/briefings/schedule/index.html#macos-vulnerabilities-hiding-in-plain-sight-26073&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Black Hat Asia 2022&lt;/a&gt;. Although the nature of CVE-2017-2533 was discussed by the authors, but the actual code part was never truly revealed, and I always wondered about the full details. Now I took the time to dig up the details, including how it was fixed, and why the fix solves the problem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2021-30808 - CVE-2021-1784 strikes back - TCC bypass via mounting</title>
      <link>https://theevilbit.github.io/posts/cve-2021-30808/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2021-30808/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CVE-2021-1784 was a vulnerability that allowed an attacker to bypass TCC by mounting over the  &lt;code&gt;~/Library/Application Support/com.apple.TCC&lt;/code&gt; directory and providing a new TCC database. We covered this with &lt;a href=&#34;https://twitter.com/_r3ggi&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wojciech Regula&lt;/a&gt; in or &lt;a href=&#34;https://www.slideshare.net/CsabaFitzl/20-ways-to-bypass-your-mac-os-privacy-mechanisms&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;20+ ways to bypass your mac os privacy mechanisms&lt;/a&gt; BlackHat USA talk. This was properly fixed in Big Sur.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-vulnerability&#34;&gt;&#xA;  The Vulnerability&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-vulnerability&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;I don&amp;rsquo;t know why but I started to experiment with it again in the very first version of Monterey beta, and found that although the exploit doesn&amp;rsquo;t work, we can mount over the &lt;code&gt;~/Library&lt;/code&gt; directory. Interestingly this wasn&amp;rsquo;t possible in Big Sur, thus this bug is a regression.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-9771 - Reversing Engineering the Fix</title>
      <link>https://theevilbit.github.io/posts/reversing_cve_2020_9771/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/reversing_cve_2020_9771/</guid>
      <description>&lt;p&gt;When I originally found the &lt;code&gt;mount_apfs&lt;/code&gt; bug back in December, 2019, I honestly had no idea what was the root cause of it, nor had a clue how to even start looking into it. The only thing I knew for sure that the answer is within kernel. My macOS knowledge was still quite fresh that time (and even today), and was busy with so many other stuff that I never had the time to start looking into it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NOCVE - Microsoft Teams for macOS Local Privilege Escalation</title>
      <link>https://theevilbit.github.io/posts/microsoft_teams_lpe/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/microsoft_teams_lpe/</guid>
      <description>&lt;p&gt;This blog post shares the details of a vulnerability Offensive Security discovered in the XPC service of Microsoft Teams. Although Microsoft secured these services reasonably well, we will see how small code mistakes can have serious impacts.&lt;/p&gt;&#xA;&lt;p&gt;We reported the issue to MSRC, but unfortunately Microsoft decided that  “the finding is valid but does not meet our bar for immediate servicing.” While they have since hardened the XPC service, it remains exploitable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-9771 - mount_apfs TCC bypass and privilege escalation</title>
      <link>https://theevilbit.github.io/posts/cve_2020_9771/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve_2020_9771/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We could mount the entire file system through APFS snapshots as read-only, with the &lt;code&gt;noowners&lt;/code&gt; flag, which enables us accessing (almost) every file in the file system, including data (documents, files, etc&amp;hellip;) of every user on the system, including those protected by Apple&amp;rsquo;s privacy framework (TCC). Even with the Guest account we could read files of admin accounts as Guest! 😱&lt;/p&gt;&#xA;&lt;p&gt;This could be achieved with a single command, for example:&#xA;&lt;code&gt;mount_apfs -o noowners -s com.apple.TimeMachine.2019-11-17-141812.local /System/Volumes/Data /tmp/snap&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14977 - Secure coding XPC Services - Part 5 - PID reuse attacks</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part5/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part5/</guid>
      <description>&lt;p&gt;In the last post of the series we will see another typical issue, where XPC services using the connecting process&amp;rsquo;s ID (PID) to verify the client instead of the audit token. We will use F-Secure SAFE again for our case study, the vulnerability was fixed in 17.8 and it was assigned CVE-2020-14977.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-root-cause&#34;&gt;&#xA;  The root cause&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-root-cause&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The XPC services of F-Secure SAFE use the process ID (PID) to verify the client&amp;rsquo;s signature, as can be seen in the code below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14978 - Secure coding XPC Services - Part 4 - Improved client authorization</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part4/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part4/</guid>
      <description>&lt;h1 id=&#34;f-secure-safe-xpc-service-exploitation-cve-2020-14978&#34;&gt;&#xA;  F-Secure SAFE XPC service exploitation (CVE-2020-14978)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#f-secure-safe-xpc-service-exploitation-cve-2020-14978&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this post we will look into an other case study which will show us (again) why XPC client verification is crucial in XPC security, and how added authorization checks can slightly improve (but not fix) the problem. The F-Secure SAFE XPC services installed on macOS were not sufficiently hardened, and a malicious actor had the ability to interact with them. The vulnerability was fixed in version 17.8, it allowed an attacker to query specific settings, or if authorization used, it could prompt a user for password on behalf of F-Secure and ask for permissions to change settings.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-0984 - Secure coding XPC Services - Part 3 - Incorrect client verification</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part3/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part3/</guid>
      <description>&lt;h1 id=&#34;microsoft-autoupdate-macos-privilege-escalation-vulnerability-cve-2020-0984&#34;&gt;&#xA;  Microsoft AutoUpdate macOS privilege escalation vulnerability (CVE-2020-0984)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#microsoft-autoupdate-macos-privilege-escalation-vulnerability-cve-2020-0984&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is the third post in my series which is trying to help Apple developers to avoid typical insecure coding practices. This one will highlight why XPC client hardening and proper verification is extremely important when we use XPC messaging on macOS between clients that run as a normal user and services that run as root. If this validation is not right, it opens up the possibility for an attacker to run privileged commands or worse case, achieve full privilege escalation on the system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TALK - Exploiting directory permissions on macOS</title>
      <link>https://theevilbit.github.io/posts/exploiting_directory_permissions_on_macos/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/exploiting_directory_permissions_on_macos/</guid>
      <description>&lt;p&gt;This research started around summer time in 2019, when everything settled down after my talk in 2019, where I detailed how did I gained root privileges via a benign App Store application, that I developed. That exploit used a symlink to achieve this, so I though I will make a more general approach and see if this type of vulnerability exists in other places as well on macOS systems. As it turns out it does exists, and not just on macOS directly but also on other apps, it appears to be a very fruitful of issue, without too much effort I found 5 exploitable bugs on macOS, 3 in Adobe installers. In the following post I will first go over the permission model of the macOS filesystem, with focus on the POSIX part, discuss some of the non trivial cases it can produce, and also give a brief overview how it is extended. I won&amp;rsquo;t cover every single detail of the permission model, as it would be a topic in itself, but rather what I found interesting from the exploitation perspective.&#xA;Then I will cover how to find these bugs, and finally I will go through in detail all of the bugs I found. Some of these are very interesting as we will see, as exploitation of them involves &amp;ldquo;writing&amp;rdquo; to files owned by root, while we are not root, which is not trivial, and can be very tricky.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14974 &amp; CVE-2020-14975 - IOBit Unlocker 1.1.2 - Local Privilege Escalation</title>
      <link>https://theevilbit.github.io/posts/iobit_unlocker_lpe/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/iobit_unlocker_lpe/</guid>
      <description>&lt;p&gt;IOBit’s Unlocker program is advertised to solve the following issues:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;IObit Unlocker performs well in solving “cannot delete files”, “access is denied”, “The file is in use by another program or user”, or “There has been a sharing violation” problems. With IObit Unlocker, you can manage all your files the way you want.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;and even:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;With “Unlock &amp;amp; Delete”, “Unlock &amp;amp; Rename”, “Unlock &amp;amp; Move”, and “Unlock &amp;amp; Copy”, IObit Unlocker offers easier ways to unlock and manage the files and folders to keep them safe and available.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TALK - macOS - Getting root with benign AppStore apps</title>
      <link>https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/</guid>
      <description>&lt;p&gt;This writeup is intended to be a bit of storytelling. I would like to show how I went down the rabbit hole in a quick ’research’ I wanted to do, and eventually found a local privilege escalation vulnerability in macOS. I also want to show, tell about all the obstacles and failures I run into, stuff that people don’t talk about usually, but I feel it’s part of the process all of us go through, when we try to create something.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14976 - GNS3 ubridge SETUID bit - arbitrary file read</title>
      <link>https://theevilbit.github.io/posts/gns3_ubridge_setuid_bit_arbitrary_file_read/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/gns3_ubridge_setuid_bit_arbitrary_file_read/</guid>
      <description>&lt;p&gt;A couple of weeks ago, I had the idea of scanning my Mac for files that has the SUID bit set, I wanted to see if there is anything interesting showing up. You can do it this way:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/sudo find / -perm -4000 -exec /bin/ls -ldb &lt;span style=&#34;color:#555&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\;&lt;/span&gt; &amp;gt; suidfilelist&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There was one item that caught my attention, and that was a file called &lt;code&gt;ubridge&lt;/code&gt; inside GNS3. I used to be a network guy, and GNS3 is a great tool to emulate real network gear, practice configuration, etc.. I highly recommend for anyone who learns networking. This was the file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2019-5514 - VMware Fusion 11 - Guest VM RCE</title>
      <link>https://theevilbit.github.io/posts/vmware_fusion_11_guest_vm_rce_cve-2019-5514/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/vmware_fusion_11_guest_vm_rce_cve-2019-5514/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;You can run an arbitrary command on a VMware Fusion guest VM through a website without any priory knowledge. Basically VMware Fusion is starting up a websocket listening only on the localhost. You can fully control all the VMs (also create/delete snapshots, whatever you want) through this websocket interface, including launching apps. You need to have VMware Tools installed on the guest for launching apps, but honestly who doesn’t have it installed. So with creating a javascript on a website, you can interact with the undocumented API, and yes it’s all unauthenticated.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
