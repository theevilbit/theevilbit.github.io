<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2021 on theevilbit blog</title>
    <link>https://theevilbit.github.io/year/2021/</link>
    <description>Recent content in 2021 on theevilbit blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 15 Dec 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://theevilbit.github.io/year/2021/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 25 - Apache2 modules</title>
      <link>https://theevilbit.github.io/beyond/beyond_0025/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0025/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 25 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Possibly a less known feature that macOS has a built-in Apache2 web server, which can be enabled anytime. Just as other Apache2 servers, it also supports the load of custom modules, and this is what we will explore here briefly for persistence. For a detailed web server setup, I recommend the following articles:&#xA;&lt;a href=&#34;https://discussions.apple.com/docs/DOC-3083&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Setting up a local web server on a Mac - Apple Community&lt;/a&gt;&#xA;&lt;a href=&#34;https://discussions.apple.com/docs/DOC-250004361&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Setting up a local web server on macOS 12… - Apple Community&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 24 - Folder Actions</title>
      <link>https://theevilbit.github.io/beyond/beyond_0024/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0024/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 24 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Folder action persistence has been documented by &lt;a href=&#34;https://twitter.com/its_a_feature_&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cody Thomas&lt;/a&gt; back in 2019 &lt;a href=&#34;https://posts.specterops.io/folder-actions-for-persistence-on-macos-8923f222343d&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in his blog&lt;/a&gt;. I think he did an awesome job, and everything he wrote still applies today. I wanted to take it a bit further and see if I can persist without any user prompts, and it turned out it is possible. I will also talk about its TCC implications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 23 - emond, The Event Monitor Daemon</title>
      <link>https://theevilbit.github.io/beyond/beyond_0023/</link>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0023/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 23 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This post will be about &lt;code&gt;emond&lt;/code&gt;, Apple&amp;rsquo;s Event Monitor daemon.&lt;/p&gt;&#xA;&lt;p&gt;I think almost everything has been already told about this method and &lt;code&gt;emond&lt;/code&gt; in general by James Reynolds &lt;a href=&#34;http://magnusviri.com/what-is-emond.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/xorrior&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xorrior&lt;/a&gt; &lt;a href=&#34;https://www.xorrior.com/emond-persistence/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; so really not much left for me. There is no point for me replicating their awesome posts, so please just read them. That&amp;rsquo;s it! Thank you for reading! ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&#xA;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 22 - LoginHook and LogoutHook</title>
      <link>https://theevilbit.github.io/beyond/beyond_0022/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0022/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 22 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This method is considered deprecated by Apple, yet it still works.&lt;/p&gt;&#xA;&lt;p&gt;LoginHooks and LogoutHooks have been widely documented by many people, so this post is mostly for completeness. The official, Apple documentation can be found here: &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CustomLogin.html#//apple_ref/doc/uid/10000172i-SW10-SW1&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Customizing Login and Logout&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LoginHooks and LogoutHooks are executed, well&amp;hellip; at logins and logouts just as the name suggest, and they are run as root. They are set in the preferences of the  &lt;code&gt;com.apple.loginwindow&lt;/code&gt; process, and so it&amp;rsquo;s stored in the file &lt;code&gt;/var/root/Library/Preferences/com.apple.loginwindow.plist&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2021-30808 - CVE-2021-1784 strikes back - TCC bypass via mounting</title>
      <link>https://theevilbit.github.io/posts/cve-2021-30808/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2021-30808/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CVE-2021-1784 was a vulnerability that allowed an attacker to bypass TCC by mounting over the  &lt;code&gt;~/Library/Application Support/com.apple.TCC&lt;/code&gt; directory and providing a new TCC database. We covered this with &lt;a href=&#34;https://twitter.com/_r3ggi&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wojciech Regula&lt;/a&gt; in or &lt;a href=&#34;https://www.slideshare.net/CsabaFitzl/20-ways-to-bypass-your-mac-os-privacy-mechanisms&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;20+ ways to bypass your mac os privacy mechanisms&lt;/a&gt; BlackHat USA talk. This was properly fixed in Big Sur.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-vulnerability&#34;&gt;&#xA;  The Vulnerability&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-vulnerability&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;I don&amp;rsquo;t know why but I started to experiment with it again in the very first version of Monterey beta, and found that although the exploit doesn&amp;rsquo;t work, we can mount over the &lt;code&gt;~/Library&lt;/code&gt; directory. Interestingly this wasn&amp;rsquo;t possible in Big Sur, thus this bug is a regression.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 21 - Re-opened Applications</title>
      <link>https://theevilbit.github.io/beyond/beyond_0021/</link>
      <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0021/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 21 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This method was also documented by Patrick Wardle, in his original &lt;a href=&#34;https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Methods of Malware Persistence&lt;/a&gt; white paper and also at &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/007/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MITRE ATT&amp;amp;CK®&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;When we restart macOS, we are presented with the following window:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://theevilbit.github.io/images/beyond/beyond_0021_0.png&#34; alt=&#34;Re-open Applications Prompt&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;I guess, most users keep it selected, and then macOS will reopen all apps.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting started in macOS security</title>
      <link>https://theevilbit.github.io/posts/getting_started_in_macos_security/</link>
      <pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/getting_started_in_macos_security/</guid>
      <description>&lt;p&gt;Many people used to ask me where to start learning about macOS security or exploitation, what are the trainings or books out there that can help with this topic. Nowadays there are a few trainings, which can get you started. Other great resources for macOS security are blog posts and conference talks.&lt;/p&gt;&#xA;&lt;p&gt;I thought I will try to collect some resources that can help people to get started in this field.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 20 - Terminal Preferences</title>
      <link>https://theevilbit.github.io/beyond/beyond_0020/</link>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0020/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 20 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This is another application specific persistence method, related to the Terminal application.&lt;/p&gt;&#xA;&lt;p&gt;In the Terminal Preferences, under the Profiles tab, we can set a command that will be executed upon Terminal&amp;rsquo;s startup. This is shown in the screen below.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://theevilbit.github.io/images/beyond/beyond_0020_0.png&#34; alt=&#34;Terminal Profile Settings&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 19 - Periodic Scripts</title>
      <link>https://theevilbit.github.io/beyond/beyond_0019/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0019/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 19 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This post has been long due, as it&amp;rsquo;s one of my favorite persistence tricks. Up until Big Sur 11.5 you could also exploit it for privilege escalation if Homebrew was installed on the system.&lt;/p&gt;&#xA;&lt;p&gt;Periodic scripts have a FreeBSD origin. These scripts are doing some maintenance tasks on the system, and scheduled to be run on a daily, weekly and monthly basis.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GateKeeper - Not a Bypass (Again)</title>
      <link>https://theevilbit.github.io/posts/gatekeeper_not_a_bypass/</link>
      <pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/gatekeeper_not_a_bypass/</guid>
      <description>&lt;p&gt;This post is about two techniques that can be useful for someone to evade GateKeeper in a red team engagement or pentest. According to Apple these are not considered bypasses, and everything works as expected.&lt;/p&gt;&#xA;&lt;h2 id=&#34;mmap&#34;&gt;&#xA;  mmap&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#mmap&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Part of GateKeeper is implemented on macOS in the &lt;code&gt;Quarantine.kext&lt;/code&gt;  kernel extension. It uses the MAC policy framework to insert hooks on the system on various points. These functions are named as hook*. Let&amp;rsquo;s take a look on what is implemented.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 18 - X11 and XQuartz</title>
      <link>https://theevilbit.github.io/beyond/beyond_0018/</link>
      <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0018/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 18 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;I learned about &lt;a href=&#34;https://www.xquartz.org/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;XQuartz&lt;/a&gt; while reading Armin Briegel&amp;rsquo;s &lt;a href=&#34;https://books.apple.com/hu/book/macos-terminal-and-shell/id1550617226&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;‎macOS Terminal and shell&lt;/a&gt; book. It&amp;rsquo;s one of the alternative third party terminals we can install on macOS. As most terminals, this one also offers unique options to persist on the system.&lt;/p&gt;&#xA;&lt;p&gt;X11 used to be part of OS X, till 10.7, and it was open source, which we can find &lt;a href=&#34;https://opensource.apple.com/source/X11server/X11server-106.7/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>macOS Monterey Shortcuts - First look</title>
      <link>https://theevilbit.github.io/posts/monterey_shortcuts/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/monterey_shortcuts/</guid>
      <description>&lt;p&gt;Apple announced macOS Monterey (macOS 12) this week at WWDC, and one of its new features that caught my eye is &lt;strong&gt;Shortcuts&lt;/strong&gt;. It&amp;rsquo;s already available on iOS, but it made its way to macOS. My security focused brain immediately thought about how cool this feature could be for red teamers or pentesters to persist on macOS :) So I decided to take a quick look on the new functionality, focusing on how it works. All of the below information is based on macOS Monterey Developer Beta 1.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 17 - Color Pickers</title>
      <link>https://theevilbit.github.io/beyond/beyond_0017/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0017/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 17 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Color pickers??? It&amp;rsquo;s this menu, where we can select a color:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://theevilbit.github.io/images/beyond/beyond_0017_0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;To my surprise we can install our own color pickers on the system, and add custom ones. There are quite a few of these, some are even open source, like this: &lt;a href=&#34;https://github.com/viktorstrate/color-picker-plus&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub - viktorstrate/color-picker-plus: An Improved Color Picker for macOS&lt;/a&gt;. Github is full of color picker codes, mostly written in Swift. We don&amp;rsquo;t really need those, unless we want to be stealthy and hide our code inside a legitimate picker.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 16 - Screen Saver</title>
      <link>https://theevilbit.github.io/beyond/beyond_0016/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0016/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 16 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Screen savers have been detailed recently by &lt;a href=&#34;https://twitter.com/_D00mfist&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Leo Pitt&lt;/a&gt;on his &lt;a href=&#34;https://posts.specterops.io/saving-your-access-d562bf5bf90b&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blog post: &amp;ldquo;Saving Your Access&amp;rdquo;&lt;/a&gt;. Considering that he already wrote most of the interesting stuff, I will try to show some new information, but there will be some overlap.&lt;/p&gt;&#xA;&lt;p&gt;Screen savers are macOS bundles with the bundle extension of &lt;code&gt;.saver&lt;/code&gt;. Their &lt;code&gt;Info.plist&lt;/code&gt; file doesn&amp;rsquo;t contain anything screen saver specific, so we can really use any bundle with the right extension.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NOCVE - TeamViewer Local Privilege Escalation Vulnerability</title>
      <link>https://theevilbit.github.io/posts/teamviewer_lpe/</link>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/teamviewer_lpe/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is a rather old vulnerability I found in TeamViewer back in 2020, and reported it through VCP/iDefense. TeamViewer fixed the vulnerability last November, but somehow I missed it, and became aware of it only recently. Their advisory can be found here:&#xA;&lt;a href=&#34;https://community.teamviewer.com/English/discussion/107710/november-updates-security-patches&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;November updates - Security patches — TeamViewer Support&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The TeamViewer macOS client used a PrivilegedHelperTool named &lt;code&gt;com.teamviewer.Helper&lt;/code&gt; to perform specific tasks that require &lt;code&gt;root&lt;/code&gt;&#xA;permissions. Back in 2020 it used a deprecate model to perform IPC communication, called Distributed Objects. It was wide open, and any client could invoke the remote object&amp;rsquo;s functions, and some of those lead to direct privilege escalation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 15 - xsanctl</title>
      <link>https://theevilbit.github.io/beyond/beyond_0015/</link>
      <pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0015/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 15 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;I run into this not so exciting persistent method when I was investigating &lt;code&gt;xsanctl&lt;/code&gt; for&amp;hellip; other&amp;hellip; reasons&amp;hellip; &lt;code&gt;xsanctl&lt;/code&gt; is a &amp;ldquo;Xsan file system control utility&amp;rdquo;, which allows us to mount and manage Xsans.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;xsanctl&lt;/code&gt; binary can be found at &lt;code&gt;/System/Library/Filesystems/acfs.fs/Contents/bin/xsanctl&lt;/code&gt;, however when we simply run the command it is run from &lt;code&gt;/usr/sbin/xsanctl&lt;/code&gt;. If we check, this is a symbolic link.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 14 - atrun</title>
      <link>https://theevilbit.github.io/beyond/beyond_0014/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0014/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 14 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;The &lt;code&gt;at&lt;/code&gt; command set is a heritage *nix job scheduler on macOS. Although it&amp;rsquo;s slowly being deprecated, it&amp;rsquo;s still available on Big Sur, although disabled by default.&lt;/p&gt;&#xA;&lt;h2 id=&#34;enabling-atrun&#34;&gt;&#xA;  Enabling atrun&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#enabling-atrun&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;As described by &lt;code&gt;atrun&lt;/code&gt;&amp;rsquo;s man page, the scheduler can be enabled using the following command:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Experiences with Apple Security Bounty</title>
      <link>https://theevilbit.github.io/posts/experiences_with_asb/</link>
      <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/experiences_with_asb/</guid>
      <description>&lt;p&gt;Since Apple started their &lt;a href=&#34;https://developer.apple.com/security-bounty/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apple Security Bounty&lt;/a&gt; program I have submitted around 50 cases to their product security team. I thought I will share my experiences working with Apple in the past 2 years. This will be useful to anyone thinking about participating in the program, and will help setting up expectations.&lt;/p&gt;&#xA;&lt;p&gt;Beyond Apple I do bug bounties also in other programs, like HackerOne, BugCrowd, VCP, ZDI or sometimes just working directly with vendors, so I have a good pool of other cases I can  compare to.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-9900 &amp; CVE-2021-1786 - Abusing macOS Crash Reporter</title>
      <link>https://theevilbit.github.io/posts/macos_crashreporter/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/macos_crashreporter/</guid>
      <description>&lt;p&gt;I plan to discuss two symlink attacks in this blog post. The first, more severe one, CVE-2020-9900 was reported by Zhongcheng Li (&lt;a href=&#34;https://twitter.com/0x434B01&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CK01&lt;/a&gt;) of Zero-dayits Team of Legendsec at Qi&amp;rsquo;anxin Group, and fixed in &lt;a href=&#34;https://support.apple.com/en-us/HT211289&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Catalina 10.15.6&lt;/a&gt;. Apple&amp;rsquo;s advisory said that with a symlink attack it was possible to elevate privileges. I never saw a public document about this bug, so I only assume that I will describe the actual issue here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 13 - Audio Plugins</title>
      <link>https://theevilbit.github.io/beyond/beyond_0013/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0013/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 13 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This is another one of my favorites for some reason. macOS being a popular audio editing device, supports external audio drivers and plugins. &lt;a href=&#34;https://twitter.com/xorrior&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@xorrior&lt;/a&gt; wrote a very extensive blog post about these at his website, here: &lt;a href=&#34;https://posts.specterops.io/audio-unit-plug-ins-896d3434a882&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Audio Unit Plug-ins. Legitimate Un-signed Code Execution | by Christopher Ross | Posts By SpecterOps Team Members&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 12 - QuickLook Plugins</title>
      <link>https://theevilbit.github.io/beyond/beyond_0012/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0012/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 12 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This technique is very similarly to Spotlight Importers, but heavily sandboxed. It’s even more limited as the user need to specifically want to preview the file.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This will be a short post and it goes hand in hand with my &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_0011/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous one&lt;/a&gt; that detailed the use of Spotlight Importers for persistence. Jonathan’s book also details QuickLook plugins and &lt;a href=&#34;https://twitter.com/osxreverser&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fG! (@osxreverser) on Twitter&lt;/a&gt; also said that he used to play with this, so I decided to take a look as well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 11 - Spotlight Importers</title>
      <link>https://theevilbit.github.io/beyond/beyond_0011/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0011/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 11 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;It works, but very limited due to heavy sandboxing, you can only read and copy files to your sandbox folder or consume some CPU power. If you have a way to escape sandbox then go for it, or could be used as part of a multi-part malware.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 10 - Application script files</title>
      <link>https://theevilbit.github.io/beyond/beyond_0010/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0010/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 10 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;I started to explore to possibility of persisting on macOS through script files contained in an application. The basic idea is that if we find a script file, which is being executed by a given application, we can edit that script file, put our code inside, and wait for an execution. Such technique is highly dependent on the applications the user has installed, so I looked through first how rare / frequent is having such scripts inside applications. I started with the below searches:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 9 - Preference Pane</title>
      <link>https://theevilbit.github.io/beyond/beyond_0009/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0009/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 9 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Preference panes on macOS are plugins to the &lt;code&gt;System Preferences.app&lt;/code&gt;. These panes can extend the functionality of the app, and typically allow you to modify configuration settings for your app. These admins are loaded when the user selects them, so they are not perfect from persistence point of view, as it requires user interaction, but can still be a thing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 8 - Hammerspoon</title>
      <link>https://theevilbit.github.io/beyond/beyond_0008/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0008/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 8 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This idea came from my colleague &lt;a href=&#34;https://twitter.com/dejandayoff&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@dejandayoff&lt;/a&gt;. It&amp;rsquo;s another application specific persistence option, related to &lt;a href=&#34;https://www.hammerspoon.org/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hammerspoon&lt;/a&gt;. The app is an automation tool, that allows macOS scripting through LUA scripting language. We can even embed full AppleScript code as well as run shell scripts.&lt;/p&gt;&#xA;&lt;p&gt;The app looks for a single file, &lt;code&gt;~/.hammerspoon/init.lua&lt;/code&gt;, and when started the script will be executed. They have plenty of examples on their &lt;a href=&#34;https://www.hammerspoon.org/go/#imessagesms&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Getting Started&lt;/a&gt; page, and an extensive API &lt;a href=&#34;https://www.hammerspoon.org/docs/index.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 7 - xbar plugins</title>
      <link>https://theevilbit.github.io/beyond/beyond_0007/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0007/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 7 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This technique came from &lt;a href=&#34;https://twitter.com/bradleyjkemp&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@bradleyjkemp&lt;/a&gt; in one of his Twitter &lt;a href=&#34;https://twitter.com/bradleyjkemp/status/13743463128759787550&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;posts&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/matryer/xbar&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xbar&lt;/a&gt; is an application that can put the output of a script into the menubar. The scripts should be placed in &lt;code&gt;~/Library/Application\ Support/xbar/plugins/&lt;/code&gt;. Standard shell scripts are supported, and so I tried the one listed on their GitHub page as an example.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 6 - SSHRC</title>
      <link>https://theevilbit.github.io/beyond/beyond_0006/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0006/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 6 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;I learned about this trick from &lt;a href=&#34;https://twitter.com/0xdade&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@0xdade&lt;/a&gt; when he &lt;a href=&#34;https://twitter.com/0xdade/status/1373145566943711235&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;posted&lt;/a&gt; it on Twitter.&lt;/p&gt;&#xA;&lt;p&gt;If we create a file in the user&amp;rsquo;s HOME directory at &lt;code&gt;~/.ssh/rc&lt;/code&gt; it will be executed prior to the user&amp;rsquo;s login shell becomes available. The man page of &lt;code&gt;sshd&lt;/code&gt; describes this in more detail.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 5 - Pluggable Authentication Modules (PAM)</title>
      <link>https://theevilbit.github.io/beyond/beyond_0005/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0005/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 5 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pluggable_authentication_module&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PAM&lt;/a&gt; originated from Red Hat Linux, but made its way to most *nix based system, including macOS. It&amp;rsquo;s a modular system, that allows third party additions to various authentication related operations. I highly recommend checking out the &lt;a href=&#34;https://docs.freebsd.org/en/articles/pam/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FreeBSD documentation&lt;/a&gt; to get a full picture.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 4 - cron jobs</title>
      <link>https://theevilbit.github.io/beyond/beyond_0004/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0004/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 4 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cron&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cron&lt;/a&gt; is probably one of the most well known persistence mechanisms for macOS and basically any *nix operating system. It was originally developed for Unix back in 1975, and made its way to most platforms, which has Unix origins, like Linux, FreeBSD and thus macOS.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 3 - Login Items</title>
      <link>https://theevilbit.github.io/beyond/beyond_0003/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0003/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 3 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;To clear up some expectations. The below tweet is not about this method, that is deferred for now. :)&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://theevilbit.github.io/images/beyond/beyond_0003_0.png&#34; alt=&#34;Twitter&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Login items are probably one of the most well documented methods to persist on macOS. It&amp;rsquo;s widely used by various application to launch themselves upon user login. These applications show up in the menubar most of the time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 2 - iTerm2 startup</title>
      <link>https://theevilbit.github.io/beyond/beyond_0002/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0002/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 2 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;If the first part was about &lt;code&gt;Terminal&lt;/code&gt; and shell profiles, it&amp;rsquo;s worth to mention &lt;a href=&#34;https://iterm2.com/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iTerm2&lt;/a&gt;, which is a popular Terminal alternative on macOS. It&amp;rsquo;s being used by many people, especially power users.&lt;/p&gt;&#xA;&lt;p&gt;When we start &lt;code&gt;iTerm2&lt;/code&gt; it starts the same shell environment as &lt;code&gt;Terminal&lt;/code&gt;,  and thus the same startup files apply here as well. However this application has an additional way to execute code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 1 - shell startup files</title>
      <link>https://theevilbit.github.io/beyond/beyond_0001/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0001/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 1 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Shell startup files are executed when our shell environment like &lt;code&gt;zsh&lt;/code&gt; or &lt;code&gt;bash&lt;/code&gt; is starting up. macOS defaults to &lt;code&gt;/bin/zsh&lt;/code&gt;  these days, and whenever we open &lt;code&gt;Terminal&lt;/code&gt; or SSH into the device, this is the shell environment we are placed into. &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;sh&lt;/code&gt; are still available, however they have to be specifically started.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - Introduction</title>
      <link>https://theevilbit.github.io/beyond/beyond_intro/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_intro/</guid>
      <description>&lt;p&gt;I was always amazed by &lt;a href=&#34;https://twitter.com/Hexacorn&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Hexacorn&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://www.hexacorn.com/blog/category/autostart-persistence/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beyond good ol&amp;rsquo; Run key&lt;/a&gt; blog post series, which collects various &lt;a href=&#34;https://attack.mitre.org/tactics/TA0003/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;persistence&lt;/a&gt; methods on Windows. It&amp;rsquo;s an awesome series, which has 133 parts at the time of this writing. I find them pretty cool, and if you are doing either offensive or defensive work on Windows, this is  a must read and follow blog.&lt;/p&gt;&#xA;&lt;p&gt;In the past years as my interest in macOS grew, and now that I&amp;rsquo;m mostly doing only macOS related research and studies I started to came across many - many tricks, which allows someone to do persistence on macOS beyond just the &lt;code&gt;LaunchDaemons&lt;/code&gt; or &lt;code&gt;LaunchAgents&lt;/code&gt; directories, which is used to store the &lt;code&gt;launchd&lt;/code&gt; startup files. This location is probably as classic on macOS as the &lt;code&gt;Run&lt;/code&gt; registry key on Windows. I did write about two different techniques in my regular posts (&lt;a href=&#34;https://theevilbit.github.io/posts/macos_persistence_spotlight_importers/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://theevilbit.github.io/posts/macos_persisting_through-application_script_files/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;), but it never became a full series. So I started to think about writing posts for each idea I came across, just like Adam does for Windows, but I would do for macOS. With almost the same name, just swapping &lt;code&gt;Run key&lt;/code&gt; with &lt;code&gt;LaunchAgents&lt;/code&gt; and name it &lt;code&gt;Beyond the good ol&#39; LaunchAgents&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About com.apple.private.security.clear-library-validation</title>
      <link>https://theevilbit.github.io/posts/com.apple.private.security.clear-library-validation/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/com.apple.private.security.clear-library-validation/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;On macOS 10.15.2 Apple introduced the &lt;code&gt;com.apple.private.security.clear-library-validation&lt;/code&gt; entitlement, which is slowly replacing the previously used &lt;code&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt; entitlement on system binaries. Although their impact is the about the same, the way they work is different. While library validation is automatically disabled using &lt;code&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt;, with &lt;code&gt;com.apple.private.security.clear-library-validation&lt;/code&gt;, the application has to disable it for itself through a &lt;code&gt;csops&lt;/code&gt; system call.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;With the release of Big Sur, I noticed that many of the system binaries have a new entitlement, which I didn&amp;rsquo;t see before, and that is &lt;code&gt;com.apple.private.security.clear-library-validation&lt;/code&gt; (later it turned out that it was introduced earlier, but I didn&amp;rsquo;t know about it that time). These applications possessed the &lt;code&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt; before, so it seemed that this is being replaced with a new one. The name suggest similarity, and testing it also confirmed, that these binaries can still load third party plugins signed by non Apple developers. This means that these entitlements have the same impact.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Divide and Conquer - A technique to bypass NextGen AV</title>
      <link>https://theevilbit.github.io/posts/divide_and_conquer/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/divide_and_conquer/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This blog post describes a generic technique I called internally on our red team assessment &amp;ldquo;Divide and Conquer&amp;rdquo;, which can be used to bypass behavioral based NextGen AV detection. It works by splitting malicious actions and API calls into distinct processes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Back in 2019 I was part of a red team, where our daily activity was to bypass a specific NextGen AV. I had this idea I called &amp;ldquo;divide and conquer&amp;rdquo;. I was so excited about it, that I had to name it :) That time I didn&amp;rsquo;t want to publicly write about it, and I also haven&amp;rsquo;t found any sources on the Internet that describes this idea (which describes my poor searching skills). Time passed, and by the time I could have write about it, I forgot. Then a few days ago &lt;a href=&#34;https://twitter.com/Hexacorn&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Adam (@Hexacorn)&lt;/a&gt; posts &lt;a href=&#34;https://twitter.com/Hexacorn/status/1350437846398722049&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt;:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
