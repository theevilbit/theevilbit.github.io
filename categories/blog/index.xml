<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BLOG on theevilbit blog</title>
    <link>https://theevilbit.github.io/categories/blog/</link>
    <description>Recent content in BLOG on theevilbit blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 24 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://theevilbit.github.io/categories/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CVE-2023-40424 - How Malware Can Bypass Transparency Consent and Control</title>
      <link>https://theevilbit.github.io/posts/cve-2023-40424/</link>
      <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2023-40424/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CVE-2023-40424 is a vulnerability that allows a root-level user to create a new user with a custom Transparency Consent and Control (TCC) database in macOS, which can then be used to access other users’ private data.&lt;/p&gt;&#xA;&lt;p&gt;First discovered back in 2022, the vulnerability was fixed by Apple in 2023 in macOS Sonoma’s initial release. But it was not fixed in earlier versions of macOS—one more reason users and admins should update their Mac computers to Sonoma.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Apple Mitigates Vulnerabilities in Installer Scripts</title>
      <link>https://theevilbit.github.io/posts/apple-mitigates-vulnerabilities-installer-scripts/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/apple-mitigates-vulnerabilities-installer-scripts/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Vulnerabilities are hot topics inside the world of security research and—because of their potentially dramatic impacts—outside as well. Unfortunately, the strategies and tactics that companies like Apple take to prevent specific vulnerabilities—or even entire families of exploits—typically attract less attention. But the fact is that engineering high-impact mitigations is typically more challenging than finding a single vulnerability.&lt;/p&gt;&#xA;&lt;p&gt;In this post, we’ll look at Apple&amp;rsquo;s recent efforts to mitigate an entire class of installer-script vulnerabilities. We will cover:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Launch and Environment Constraints Deep Dive</title>
      <link>https://theevilbit.github.io/posts/launch_constraints_deep_dive/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/launch_constraints_deep_dive/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;UPDATE 2023.10.10.: After chatting with Thijs Alkemade, &lt;a href=&#34;https://mastodon.social/@xnyhps@infosec.exchange&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@xnyhps&lt;/a&gt;, updated the XPC part of the post as I originally misunderstood Apple&amp;rsquo;s intent.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Apple introduced Launch Constraints in macOS Ventura (13) as a response to some common attack scenarios. LC was probably the most impactful mitigation against various type of vulnerabilities. Before we dwell into LC let&amp;rsquo;s review a couple of old vulnerabilities, which would have been not exploitable if LC was present.&lt;/p&gt;</description>
    </item>
    <item>
      <title>macOS Service Management - The SMAppService API - Quick Notes</title>
      <link>https://theevilbit.github.io/posts/smappservice/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/smappservice/</guid>
      <description>&lt;p&gt;This is just a super quick post and some notes, about my experiences with SMAppService.&lt;/p&gt;&#xA;&lt;p&gt;Apple introduced the SMAppService API in macOS Ventura (13) to replace the older SMJobBless and SMLoginItemSetEnabled APIs. SMAppService should be used now to register any new Login Item, Launch Agent or Daemon.&lt;/p&gt;&#xA;&lt;p&gt;The API is super easy to use, even I could learn it from the developer docs, which is a big thing, and it means that it is indeed really easy as I suck as a developer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2022-22655 - TCC - Location Services Bypass</title>
      <link>https://theevilbit.github.io/posts/cve-2022-22655/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2022-22655/</guid>
      <description>&lt;p&gt;This is a quick blogpost about a vulnerability I covered in our &lt;a href=&#34;https://www.blackhat.com/eu-22/briefings/schedule/index.html#knockout-win-against-tcc----new-ways-to-bypass-your-macos-privacy-mechanisms-29272&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Black Hat Europe 2022 talk&lt;/a&gt; with &lt;a href=&#34;https://twitter.com/_r3ggi&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wojciech Regula&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In contrary to what people would expect, clients which can access location services are not maintained in one of the TCC databased, but in a separate location, and it&amp;rsquo;s maintained by locationd. This has been also recently covered by Howard Oakley, in his &lt;a href=&#34;https://eclecticlight.co/2023/02/10/privacy-what-tcc-does-and-doesnt/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Privacy: what TCC does and doesn’t&lt;/a&gt; blogpost.&lt;/p&gt;&#xA;&lt;p&gt;TCC&amp;rsquo;s location services allowed client list is located inside &lt;code&gt;/var/db/locationd/clients.plist&lt;/code&gt;. This file is protected by the Sandbox/TCC, thus we can&amp;rsquo;t modify it, and add new client, even if we have root privileges.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2022-32929 - Bypass iOS backup&#39;s TCC protection</title>
      <link>https://theevilbit.github.io/posts/cve-2022-32929/</link>
      <pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2022-32929/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Normally, when a users backup their iOS device, the backup is saved into &lt;code&gt;~/Library/Application Support/MobileSync/Backup&lt;/code&gt; directory. The &lt;code&gt;MobileSync&lt;/code&gt; directory is properly protected by TCC, as the backup can contain photos, contact information, everything from the iOS device, and it might be unencrypted, so this is a whole lot of private information. It&amp;rsquo;s only accessible with Full Disk Access rights.&lt;/p&gt;&#xA;&lt;p&gt;The issue is that an attacker can invoke the &lt;code&gt;AppleMobileBackup&lt;/code&gt; utility and make a backup to a custom location. Thus completely bypassing the protected backup location.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prologue - The Lord of The Rules</title>
      <link>https://theevilbit.github.io/posts/prologue/</link>
      <pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/prologue/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;The world is changed:&#xA;I feel it in the Sandbox,&#xA;I feel it in the entitlements,&#xA;I smell it in the kernel...&#xA;&#xA;Much that once was is lost,&#xA;only a few live now who remember it.&#xA;&#xA;Lord of the Rules&#xA;&#xA;It began with the forging of the&#xA;Great Privacy Rules.&#xA;          &#xA;Three were given to the root user,&#xA;immortal, wisest...fairest of all beings.&#xA;&#xA;Seven to the users, great people&#xA;and clients of the Apple spaceship.&#xA;&#xA;And Nine...nine rules were gifted&#xA;to Apple processes which,&#xA;above all else, desire power.&#xA;&#xA;For within these rules was bound&#xA;the strength and will to govern&#xA;privacy.&#xA;&#xA;But they were all of them deceived.&#xA;&#xA;...for another rule was made.&#xA;&#xA;In the land of Cupertino, in the fires of&#xA;Intel CPUs, the Dark Lord Privacy forged&#xA;in secret a Master Rule to control all&#xA;others.&#xA;&#xA;...and into this Rule he poured his&#xA;will to dominate all processes.&#xA;&#xA;One Rule to rule them all...&#xA;&#xA;One by one the Free lands of macOS&#xA;fell to the power of the rule.&#xA;&#xA;But there were some...who resisted.&#xA;&#xA;A last alliance of&#xA;legacy software,&#xA;disabled library validation&#xA;and bounty hunters&#xA;marched against the armies of TCC.&#xA;&#xA;On the slopes of El Capitan they fought&#xA;for the freedom of macOS.&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>CVE-2017-2533 - The details behind</title>
      <link>https://theevilbit.github.io/posts/cve-2017-2533/</link>
      <pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2017-2533/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://support.apple.com/en-us/HT207797&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2017-2533&lt;/a&gt;  was part of a chain of vulnerabilities, used at pwn2own 2017 found by the phoenhex team. They wrote a blogpost about it &lt;a href=&#34;https://phoenhex.re/2017-06-09/pwn2own-diskarbitrationd-privesc&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. This vulnerability led me to find CVE-2022-32780, which I detailed at &lt;a href=&#34;https://www.blackhat.com/asia-22/briefings/schedule/index.html#macos-vulnerabilities-hiding-in-plain-sight-26073&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Black Hat Asia 2022&lt;/a&gt;. Although the nature of CVE-2017-2533 was discussed by the authors, but the actual code part was never truly revealed, and I always wondered about the full details. Now I took the time to dig up the details, including how it was fixed, and why the fix solves the problem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AMFI Launch Constraints - First Quick Look</title>
      <link>https://theevilbit.github.io/posts/amfi_launch_constraints/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/amfi_launch_constraints/</guid>
      <description>&lt;p&gt;Dropping some initial quick notes for a new security feature I ran into on macOS Ventura. It&amp;rsquo;s called &amp;ldquo;Launch Constraints&amp;rdquo; and lives inside AMFI.&lt;/p&gt;&#xA;&lt;p&gt;Do the following experiment: Copy &lt;code&gt;Terminal.app&lt;/code&gt; to your HOME folder and try to run it on Monterey and Ventura. On the former it will work without any issues, on the other it will fail, and we will get the following error:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2022-06-14 05:59:55.254678+0200 0x5481     Default     0x0                  0      0&#xA;kernel: (AppleMobileFileIntegrity) AMFI: Launch Constraint Violation (enforcing), error&#xA;info: c[1]p[1]m[1]e[2], (Constraint not matched) launching proc[vc: 1 pid: 1112]:&#xA;/Users/ace/Terminal.app/Contents/MacOS/Terminal, launch type 0, failure proc [vc: 1 pid:&#xA;1112]: /Users/ace/Terminal.app/Contents/MacOS/Terminal&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is interesting. If we copy it to other locations, it will fail as well. The reason looks to be something called &amp;ldquo;Launch Constraint&amp;rdquo;. So it seems that it will disallow the execution of system apps outside their location. This is pretty nice, as this has been abused plenty of times in the past, as moving them out of their place usually allowed someone inject code into them. Remember these TCC bypasses?&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2021-30808 - CVE-2021-1784 strikes back - TCC bypass via mounting</title>
      <link>https://theevilbit.github.io/posts/cve-2021-30808/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2021-30808/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CVE-2021-1784 was a vulnerability that allowed an attacker to bypass TCC by mounting over the  &lt;code&gt;~/Library/Application Support/com.apple.TCC&lt;/code&gt; directory and providing a new TCC database. We covered this with &lt;a href=&#34;https://twitter.com/_r3ggi&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wojciech Regula&lt;/a&gt; in or &lt;a href=&#34;https://www.slideshare.net/CsabaFitzl/20-ways-to-bypass-your-mac-os-privacy-mechanisms&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;20+ ways to bypass your mac os privacy mechanisms&lt;/a&gt; BlackHat USA talk. This was properly fixed in Big Sur.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-vulnerability&#34;&gt;&#xA;  The Vulnerability&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-vulnerability&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;I don&amp;rsquo;t know why but I started to experiment with it again in the very first version of Monterey beta, and found that although the exploit doesn&amp;rsquo;t work, we can mount over the &lt;code&gt;~/Library&lt;/code&gt; directory. Interestingly this wasn&amp;rsquo;t possible in Big Sur, thus this bug is a regression.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting started in macOS security</title>
      <link>https://theevilbit.github.io/posts/getting_started_in_macos_security/</link>
      <pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/getting_started_in_macos_security/</guid>
      <description>&lt;p&gt;Many people used to ask me where to start learning about macOS security or exploitation, what are the trainings or books out there that can help with this topic. Nowadays there are a few trainings, which can get you started. Other great resources for macOS security are blog posts and conference talks.&lt;/p&gt;&#xA;&lt;p&gt;I thought I will try to collect some resources that can help people to get started in this field.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GateKeeper - Not a Bypass (Again)</title>
      <link>https://theevilbit.github.io/posts/gatekeeper_not_a_bypass/</link>
      <pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/gatekeeper_not_a_bypass/</guid>
      <description>&lt;p&gt;This post is about two techniques that can be useful for someone to evade GateKeeper in a red team engagement or pentest. According to Apple these are not considered bypasses, and everything works as expected.&lt;/p&gt;&#xA;&lt;h2 id=&#34;mmap&#34;&gt;&#xA;  mmap&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#mmap&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Part of GateKeeper is implemented on macOS in the &lt;code&gt;Quarantine.kext&lt;/code&gt;  kernel extension. It uses the MAC policy framework to insert hooks on the system on various points. These functions are named as hook*. Let&amp;rsquo;s take a look on what is implemented.&lt;/p&gt;</description>
    </item>
    <item>
      <title>macOS Monterey Shortcuts - First look</title>
      <link>https://theevilbit.github.io/posts/monterey_shortcuts/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/monterey_shortcuts/</guid>
      <description>&lt;p&gt;Apple announced macOS Monterey (macOS 12) this week at WWDC, and one of its new features that caught my eye is &lt;strong&gt;Shortcuts&lt;/strong&gt;. It&amp;rsquo;s already available on iOS, but it made its way to macOS. My security focused brain immediately thought about how cool this feature could be for red teamers or pentesters to persist on macOS :) So I decided to take a quick look on the new functionality, focusing on how it works. All of the below information is based on macOS Monterey Developer Beta 1.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NOCVE - TeamViewer Local Privilege Escalation Vulnerability</title>
      <link>https://theevilbit.github.io/posts/teamviewer_lpe/</link>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/teamviewer_lpe/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is a rather old vulnerability I found in TeamViewer back in 2020, and reported it through VCP/iDefense. TeamViewer fixed the vulnerability last November, but somehow I missed it, and became aware of it only recently. Their advisory can be found here:&#xA;&lt;a href=&#34;https://community.teamviewer.com/English/discussion/107710/november-updates-security-patches&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;November updates - Security patches — TeamViewer Support&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The TeamViewer macOS client used a PrivilegedHelperTool named &lt;code&gt;com.teamviewer.Helper&lt;/code&gt; to perform specific tasks that require &lt;code&gt;root&lt;/code&gt;&#xA;permissions. Back in 2020 it used a deprecate model to perform IPC communication, called Distributed Objects. It was wide open, and any client could invoke the remote object&amp;rsquo;s functions, and some of those lead to direct privilege escalation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Experiences with Apple Security Bounty</title>
      <link>https://theevilbit.github.io/posts/experiences_with_asb/</link>
      <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/experiences_with_asb/</guid>
      <description>&lt;p&gt;Since Apple started their &lt;a href=&#34;https://developer.apple.com/security-bounty/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apple Security Bounty&lt;/a&gt; program I have submitted around 50 cases to their product security team. I thought I will share my experiences working with Apple in the past 2 years. This will be useful to anyone thinking about participating in the program, and will help setting up expectations.&lt;/p&gt;&#xA;&lt;p&gt;Beyond Apple I do bug bounties also in other programs, like HackerOne, BugCrowd, VCP, ZDI or sometimes just working directly with vendors, so I have a good pool of other cases I can  compare to.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-9900 &amp; CVE-2021-1786 - Abusing macOS Crash Reporter</title>
      <link>https://theevilbit.github.io/posts/macos_crashreporter/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/macos_crashreporter/</guid>
      <description>&lt;p&gt;I plan to discuss two symlink attacks in this blog post. The first, more severe one, CVE-2020-9900 was reported by Zhongcheng Li (&lt;a href=&#34;https://twitter.com/0x434B01&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CK01&lt;/a&gt;) of Zero-dayits Team of Legendsec at Qi&amp;rsquo;anxin Group, and fixed in &lt;a href=&#34;https://support.apple.com/en-us/HT211289&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Catalina 10.15.6&lt;/a&gt;. Apple&amp;rsquo;s advisory said that with a symlink attack it was possible to elevate privileges. I never saw a public document about this bug, so I only assume that I will describe the actual issue here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About com.apple.private.security.clear-library-validation</title>
      <link>https://theevilbit.github.io/posts/com.apple.private.security.clear-library-validation/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/com.apple.private.security.clear-library-validation/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;On macOS 10.15.2 Apple introduced the &lt;code&gt;com.apple.private.security.clear-library-validation&lt;/code&gt; entitlement, which is slowly replacing the previously used &lt;code&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt; entitlement on system binaries. Although their impact is the about the same, the way they work is different. While library validation is automatically disabled using &lt;code&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt;, with &lt;code&gt;com.apple.private.security.clear-library-validation&lt;/code&gt;, the application has to disable it for itself through a &lt;code&gt;csops&lt;/code&gt; system call.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;With the release of Big Sur, I noticed that many of the system binaries have a new entitlement, which I didn&amp;rsquo;t see before, and that is &lt;code&gt;com.apple.private.security.clear-library-validation&lt;/code&gt; (later it turned out that it was introduced earlier, but I didn&amp;rsquo;t know about it that time). These applications possessed the &lt;code&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt; before, so it seemed that this is being replaced with a new one. The name suggest similarity, and testing it also confirmed, that these binaries can still load third party plugins signed by non Apple developers. This means that these entitlements have the same impact.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Divide and Conquer - A technique to bypass NextGen AV</title>
      <link>https://theevilbit.github.io/posts/divide_and_conquer/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/divide_and_conquer/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This blog post describes a generic technique I called internally on our red team assessment &amp;ldquo;Divide and Conquer&amp;rdquo;, which can be used to bypass behavioral based NextGen AV detection. It works by splitting malicious actions and API calls into distinct processes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Back in 2019 I was part of a red team, where our daily activity was to bypass a specific NextGen AV. I had this idea I called &amp;ldquo;divide and conquer&amp;rdquo;. I was so excited about it, that I had to name it :) That time I didn&amp;rsquo;t want to publicly write about it, and I also haven&amp;rsquo;t found any sources on the Internet that describes this idea (which describes my poor searching skills). Time passed, and by the time I could have write about it, I forgot. Then a few days ago &lt;a href=&#34;https://twitter.com/Hexacorn&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Adam (@Hexacorn)&lt;/a&gt; posts &lt;a href=&#34;https://twitter.com/Hexacorn/status/1350437846398722049&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-9771 - Reversing Engineering the Fix</title>
      <link>https://theevilbit.github.io/posts/reversing_cve_2020_9771/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/reversing_cve_2020_9771/</guid>
      <description>&lt;p&gt;When I originally found the &lt;code&gt;mount_apfs&lt;/code&gt; bug back in December, 2019, I honestly had no idea what was the root cause of it, nor had a clue how to even start looking into it. The only thing I knew for sure that the answer is within kernel. My macOS knowledge was still quite fresh that time (and even today), and was busy with so many other stuff that I never had the time to start looking into it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NOCVE - Microsoft Teams for macOS Local Privilege Escalation</title>
      <link>https://theevilbit.github.io/posts/microsoft_teams_lpe/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/microsoft_teams_lpe/</guid>
      <description>&lt;p&gt;This blog post shares the details of a vulnerability Offensive Security discovered in the XPC service of Microsoft Teams. Although Microsoft secured these services reasonably well, we will see how small code mistakes can have serious impacts.&lt;/p&gt;&#xA;&lt;p&gt;We reported the issue to MSRC, but unfortunately Microsoft decided that  “the finding is valid but does not meet our bar for immediate servicing.” While they have since hardened the XPC service, it remains exploitable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let&#39;s talk macOS Authorization</title>
      <link>https://theevilbit.github.io/posts/macos_authorization/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/macos_authorization/</guid>
      <description>&lt;p&gt;This is a blog post I wanted to write for a while now, but somehow never got the time for it, and I also knew that it will require lots of time, so I kept delaying it. I finally kicked my ass, sat down, and wrote it.&lt;/p&gt;&#xA;&lt;p&gt;The goal of the post is to cover many aspects of authorization, which I found interesting from security perspective. Honestly, partially for selfish reasons so I will have a goto summary when I need to lookup something later instead of browsing through 8-10 different articles. All of these information I try catch here in one post, are known, but spread all over the place in various blog posts and articles, and I never found a good, central location with all the details. Also some of the items are very confusing and it took me some time to clear things in my head as not everything is obvious or intuitive.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-9771 - mount_apfs TCC bypass and privilege escalation</title>
      <link>https://theevilbit.github.io/posts/cve_2020_9771/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve_2020_9771/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We could mount the entire file system through APFS snapshots as read-only, with the &lt;code&gt;noowners&lt;/code&gt; flag, which enables us accessing (almost) every file in the file system, including data (documents, files, etc&amp;hellip;) of every user on the system, including those protected by Apple&amp;rsquo;s privacy framework (TCC). Even with the Guest account we could read files of admin accounts as Guest! 😱&lt;/p&gt;&#xA;&lt;p&gt;This could be achieved with a single command, for example:&#xA;&lt;code&gt;mount_apfs -o noowners -s com.apple.TimeMachine.2019-11-17-141812.local /System/Volumes/Data /tmp/snap&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14977 - Secure coding XPC Services - Part 5 - PID reuse attacks</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part5/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part5/</guid>
      <description>&lt;p&gt;In the last post of the series we will see another typical issue, where XPC services using the connecting process&amp;rsquo;s ID (PID) to verify the client instead of the audit token. We will use F-Secure SAFE again for our case study, the vulnerability was fixed in 17.8 and it was assigned CVE-2020-14977.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-root-cause&#34;&gt;&#xA;  The root cause&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-root-cause&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The XPC services of F-Secure SAFE use the process ID (PID) to verify the client&amp;rsquo;s signature, as can be seen in the code below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14978 - Secure coding XPC Services - Part 4 - Improved client authorization</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part4/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part4/</guid>
      <description>&lt;h1 id=&#34;f-secure-safe-xpc-service-exploitation-cve-2020-14978&#34;&gt;&#xA;  F-Secure SAFE XPC service exploitation (CVE-2020-14978)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#f-secure-safe-xpc-service-exploitation-cve-2020-14978&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this post we will look into an other case study which will show us (again) why XPC client verification is crucial in XPC security, and how added authorization checks can slightly improve (but not fix) the problem. The F-Secure SAFE XPC services installed on macOS were not sufficiently hardened, and a malicious actor had the ability to interact with them. The vulnerability was fixed in version 17.8, it allowed an attacker to query specific settings, or if authorization used, it could prompt a user for password on behalf of F-Secure and ask for permissions to change settings.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The AMFI MACF policy system call</title>
      <link>https://theevilbit.github.io/posts/amfi_syscall/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/amfi_syscall/</guid>
      <description>&lt;p&gt;On macOS, one popular technique to inject code into other applications is leveraging the &lt;code&gt;DYLD_INSERT_LIBRARIES&lt;/code&gt; environment variable, which I wrote about in 2019 &lt;a href=&#34;https://theevilbit.github.io/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DYLD_INSERT_LIBRARIES DYLIB injection in macOS / OSX&lt;/a&gt;. This variable can store a colon-separated list of dynamic libraries to load before the ones specified in the target process.&lt;/p&gt;&#xA;&lt;p&gt;Several limitations apply to when this injection technique can be used and when it cannot, which I also discussed. I revisited this topic, not only because things might have changed since then but also to ensure that I didn’t miss anything. It turned out to be a wise move and a useful exercise.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-0984 - Secure coding XPC Services - Part 3 - Incorrect client verification</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part3/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part3/</guid>
      <description>&lt;h1 id=&#34;microsoft-autoupdate-macos-privilege-escalation-vulnerability-cve-2020-0984&#34;&gt;&#xA;  Microsoft AutoUpdate macOS privilege escalation vulnerability (CVE-2020-0984)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#microsoft-autoupdate-macos-privilege-escalation-vulnerability-cve-2020-0984&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is the third post in my series which is trying to help Apple developers to avoid typical insecure coding practices. This one will highlight why XPC client hardening and proper verification is extremely important when we use XPC messaging on macOS between clients that run as a normal user and services that run as root. If this validation is not right, it opens up the possibility for an attacker to run privileged commands or worse case, achieve full privilege escalation on the system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kernel Debugging macOS with SIP</title>
      <link>https://theevilbit.github.io/posts/kernel_debugging_with_sip/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/kernel_debugging_with_sip/</guid>
      <description>&lt;p&gt;As security researchers, we often find ourselves needing to look deep into various kernels to fully understand our target and accomplish our goals. Doing so on the Windows platform is no mystery, as there have been countless well-written posts about kernel debugging setups. For macOS, however, the situation is slightly different.&lt;/p&gt;&#xA;&lt;p&gt;There are many great posts describing how to set up kernel debugging between two machines, but all of them suggest that SIP (System Integrity Protection) should be disabled for kernel debugging. This creates a problem if we want to investigate the inner workings of macOS’s security mechanisms, since turning off SIP will also turn off most of the foundational security features of the operating system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Secure coding XPC Services - Part 2 - Checking CS (CodeSigning) flags of the client</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part2/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part2/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m still waiting for some bug fixes to release the previously planned posts, and in the meantime I continue to poke at other PrivilegedHelperTools. This post born because I actually failed to exploit an XPC service, and I learned something new in regards, of how to securely write such a service. One application that came to my sight is &lt;a href=&#34;https://www.sparklabs.com/viscosity/download/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Viscosity&lt;/a&gt;. This tool was already in Tyler Bohan&amp;rsquo;s list, where his team looked on exploiting such services: &lt;a href=&#34;https://github.com/blankwall/Offensive-Con&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub - blankwall/Offensive-Con: Talk and materials for Offensive Con presentation - Privileged Helper Tools&lt;/a&gt;. I still thought that I will give it a try, because many times, fixes are not properly done, and you can reexploit the bugs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TALK - Exploiting directory permissions on macOS</title>
      <link>https://theevilbit.github.io/posts/exploiting_directory_permissions_on_macos/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/exploiting_directory_permissions_on_macos/</guid>
      <description>&lt;p&gt;This research started around summer time in 2019, when everything settled down after my talk in 2019, where I detailed how did I gained root privileges via a benign App Store application, that I developed. That exploit used a symlink to achieve this, so I though I will make a more general approach and see if this type of vulnerability exists in other places as well on macOS systems. As it turns out it does exists, and not just on macOS directly but also on other apps, it appears to be a very fruitful of issue, without too much effort I found 5 exploitable bugs on macOS, 3 in Adobe installers. In the following post I will first go over the permission model of the macOS filesystem, with focus on the POSIX part, discuss some of the non trivial cases it can produce, and also give a brief overview how it is extended. I won&amp;rsquo;t cover every single detail of the permission model, as it would be a topic in itself, but rather what I found interesting from the exploitation perspective.&#xA;Then I will cover how to find these bugs, and finally I will go through in detail all of the bugs I found. Some of these are very interesting as we will see, as exploitation of them involves &amp;ldquo;writing&amp;rdquo; to files owned by root, while we are not root, which is not trivial, and can be very tricky.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2019-20057 - Secure coding XPC services - Part 1 - Why EvenBetterAuthorization is not enough?</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part1/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part1/</guid>
      <description>&lt;p&gt;This is the first part of a blog post series I plan about PrivilegedHelperTools that exists on macOS systems. I recently took a look on a couple of these tools, and found that it&amp;rsquo;s very easy to make the code insecure, as there are many small pieces to it, and if one is done wrong, the helper tool will be open to abuse by anyone having a foothold on the system. Depending on the application this might be limited to certain privileged actions (setting system configurations, mounting, etc&amp;hellip;), and in some cases it&amp;rsquo;s more broad, and thus a full privilege escalation can be performed. Ideally only the real client application should be able to talk to the helper tool, and all other connections should be refused.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GateKeeper - Bypass or not bypass?</title>
      <link>https://theevilbit.github.io/posts/gatekeeper_bypass_or_not_bypass/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/gatekeeper_bypass_or_not_bypass/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;On macOS Mojave Gatekeeper only verifies executables, which are run with the &lt;code&gt;open&lt;/code&gt; command or the user double clicks. It won’t verify files, that are executed through other means like, directly executing a binary &lt;code&gt;./myapp&lt;/code&gt; regardless of the quarantine attribute. If you can place a plist file inside LaunchAgents/LaunchDaemons, the command inside will also be executed. Prior to Catalina there is a way to trick users to drag &amp;amp; drop files in the LaunchAgents folder.&#xA;On macOS Catalina lot has changed, the most notable one regarding gatekeeper is that it will verify files when executed via classic ‘exec’ methods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14974 &amp; CVE-2020-14975 - IOBit Unlocker 1.1.2 - Local Privilege Escalation</title>
      <link>https://theevilbit.github.io/posts/iobit_unlocker_lpe/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/iobit_unlocker_lpe/</guid>
      <description>&lt;p&gt;IOBit’s Unlocker program is advertised to solve the following issues:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;IObit Unlocker performs well in solving “cannot delete files”, “access is denied”, “The file is in use by another program or user”, or “There has been a sharing violation” problems. With IObit Unlocker, you can manage all your files the way you want.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;and even:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;With “Unlock &amp;amp; Delete”, “Unlock &amp;amp; Rename”, “Unlock &amp;amp; Move”, and “Unlock &amp;amp; Copy”, IObit Unlocker offers easier ways to unlock and manage the files and folders to keep them safe and available.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NOCVE - Few click RCE via GitHub Desktop macOS client with Gatekeeper bypass and custom URL handlers</title>
      <link>https://theevilbit.github.io/posts/few_click_rce_via_github_desktop_macos_client_with_gatekeeper_bypass_and_custom_url_handlers/</link>
      <pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/few_click_rce_via_github_desktop_macos_client_with_gatekeeper_bypass_and_custom_url_handlers/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The GitHub Desktop app doesn’t add the quarantine extended attribute to files downloaded from the web, and this along with macOS’s URL handler auto-registration feature allows an attacker to execute arbitrary, even unsigned code on a macOS system. If we don’t count the clicks required to open the GitHub App, and cloning an external repository, then this is a 2 click RCE.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UninstallString - a possible LPE via Social Engineering</title>
      <link>https://theevilbit.github.io/posts/uninstallstring_a_possible_lpe_via_social_engineering/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/uninstallstring_a_possible_lpe_via_social_engineering/</guid>
      <description>&lt;p&gt;Whenever you install an application on Windows, typically through MSI, there is a registry key created, with plenty of information for uninstallation, like the uninstaller location, install date, publisher, etc… you can find all of the options here:&#xA;&lt;a href=&#34;https://nsis.sourceforge.io/Add_uninstall_information_to_Add/Remove_Programs&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Add uninstall information to Add/Remove Programs - NSIS&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;In case an application is installed for the current user and not for all user, the Installation/Uninstallation details will go to the &lt;code&gt;Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\&lt;/code&gt; registry key instead of the &lt;code&gt;HKLM&lt;/code&gt; hive. For example OneDrive has all the information under the following registry key: &lt;code&gt;Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\OneDriveSetup.exe&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>A simple protection against HMValidateHandle technique</title>
      <link>https://theevilbit.github.io/posts/a_simple_protection_against_hmvalidatehandle_technique/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/a_simple_protection_against_hmvalidatehandle_technique/</guid>
      <description>&lt;p&gt;In the recent days I was reading technical analysis of win32k exploits from recent years, and it caught my eyes, that the HMValidateHandle technique is very heavily used almost everywhere. Then I had an idea how to protect against this family of exploits, which I think is very simple. This post will be about that.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-hmvalidatehandle&#34;&gt;&#xA;  What is HMValidateHandle?&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-is-hmvalidatehandle&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;HMValidateHandle is an internal, unexported function of &lt;code&gt;user32.dll&lt;/code&gt;. It takes a handle and a handle type as arguments, and by looking up the handle table, if the handle is matching with the type it will copy the object to user memory. If the object contains a pointer to itself, like &lt;code&gt;tagWND&lt;/code&gt; it can be used to leak memory addresses from the kernel. This has been a known technique for very long time, I think the first mention of this was in Tarjei Mandt’s 2011 BlackHat US talk, you can find the PDF here: &lt;a href=&#34;https://media.blackhat.com/bh-us-11/Mandt/BH_US_11_Mandt_win32k_WP.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://media.blackhat.com/bh-us-11/Mandt/BH_US_11_Mandt_win32k_WP.pdf&lt;/a&gt;&#xA;There are awful lot of documentation about this, and it was widely abused in many-many Windows kernel exploits, as you could reliably leak kernel object addresses, especially useful for kernel pool spraying. Thus Microsoft decided to finally close this, and so this technique doesn’t work beyond Windows 10 RS4.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DYLD_INSERT_LIBRARIES DYLIB injection in macOS / OSX</title>
      <link>https://theevilbit.github.io/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/</guid>
      <description>&lt;p&gt;After my recent blog post, my old mate &lt;a href=&#34;https://twitter.com/_Dark_Knight_&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@_Dark_Knight_&lt;/a&gt; reached out to me and he asked me a question:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;“Do you typically callout user apps that allow dyld_insert_libraries?”&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;And a few similar ones, and I will be honest, I had no idea what is he talking about, if only I understood the question :D Despite the fact that my recent blog posts and talks are about macOS, I deal much more with Windows on a daily basis, probably like 95%, and macOS is still a whole new territory for me. So I decided to dig into the question and learn a bit more about this.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TALK - macOS - Getting root with benign AppStore apps</title>
      <link>https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/</guid>
      <description>&lt;p&gt;This writeup is intended to be a bit of storytelling. I would like to show how I went down the rabbit hole in a quick ’research’ I wanted to do, and eventually found a local privilege escalation vulnerability in macOS. I also want to show, tell about all the obstacles and failures I run into, stuff that people don’t talk about usually, but I feel it’s part of the process all of us go through, when we try to create something.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14976 - GNS3 ubridge SETUID bit - arbitrary file read</title>
      <link>https://theevilbit.github.io/posts/gns3_ubridge_setuid_bit_arbitrary_file_read/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/gns3_ubridge_setuid_bit_arbitrary_file_read/</guid>
      <description>&lt;p&gt;A couple of weeks ago, I had the idea of scanning my Mac for files that has the SUID bit set, I wanted to see if there is anything interesting showing up. You can do it this way:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/sudo find / -perm -4000 -exec /bin/ls -ldb &lt;span style=&#34;color:#555&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\;&lt;/span&gt; &amp;gt; suidfilelist&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There was one item that caught my attention, and that was a file called &lt;code&gt;ubridge&lt;/code&gt; inside GNS3. I used to be a network guy, and GNS3 is a great tool to emulate real network gear, practice configuration, etc.. I highly recommend for anyone who learns networking. This was the file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2019-5514 - VMware Fusion 11 - Guest VM RCE</title>
      <link>https://theevilbit.github.io/posts/vmware_fusion_11_guest_vm_rce_cve-2019-5514/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/vmware_fusion_11_guest_vm_rce_cve-2019-5514/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;You can run an arbitrary command on a VMware Fusion guest VM through a website without any priory knowledge. Basically VMware Fusion is starting up a websocket listening only on the localhost. You can fully control all the VMs (also create/delete snapshots, whatever you want) through this websocket interface, including launching apps. You need to have VMware Tools installed on the guest for launching apps, but honestly who doesn’t have it installed. So with creating a javascript on a website, you can interact with the undocumented API, and yes it’s all unauthenticated.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
