<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernel Exploitation on theevilbit blog</title>
    <link>https://theevilbit.github.io/tags/kernel-exploitation/</link>
    <description>Recent content in Kernel Exploitation on theevilbit blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 31 Jul 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://theevilbit.github.io/tags/kernel-exploitation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A simple protection against HMValidateHandle technique</title>
      <link>https://theevilbit.github.io/posts/a_simple_protection_against_hmvalidatehandle_technique/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/a_simple_protection_against_hmvalidatehandle_technique/</guid>
      <description>In the recent days I was reading technical analysis of win32k exploits from recent years, and it caught my eyes, that the HMValidateHandle technique is very heavily used almost everywhere. Then I had an idea how to protect against this family of exploits, which I think is very simple. This post will be about that.&#xA;What is HMValidateHandle? Link to heading HMValidateHandle is an internal, unexported function of user32.dll. It takes a handle and a handle type as arguments, and by looking up the handle table, if the handle is matching with the type it will copy the object to user memory.</description>
    </item>
  </channel>
</rss>
