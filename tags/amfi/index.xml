<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Amfi on theevilbit blog</title>
    <link>https://theevilbit.github.io/tags/amfi/</link>
    <description>Recent content in Amfi on theevilbit blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 09 Oct 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://theevilbit.github.io/tags/amfi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Launch and Environment Constraints Deep Dive</title>
      <link>https://theevilbit.github.io/posts/launch_constraints_deep_dive/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/launch_constraints_deep_dive/</guid>
      <description>UPDATE 2023.10.10.: After chatting with Thijs Alkemade, @xnyhps, updated the XPC part of the post as I originally misunderstood Apple&amp;rsquo;s intent.&#xA;Apple introduced Launch Constraints in macOS Ventura (13) as a response to some common attack scenarios. LC was probably the most impactful mitigation against various type of vulnerabilities. Before we dwell into LC let&amp;rsquo;s review a couple of old vulnerabilities, which would have been not exploitable if LC was present.</description>
    </item>
    <item>
      <title>AMFI Launch Constraints - First Quick Look</title>
      <link>https://theevilbit.github.io/posts/amfi_launch_constraints/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/amfi_launch_constraints/</guid>
      <description>Dropping some initial quick notes for a new security feature I ran into on macOS Ventura. It&amp;rsquo;s called &amp;ldquo;Launch Constraints&amp;rdquo; and lives inside AMFI.&#xA;Do the following experiment: Copy Terminal.app to your HOME folder and try to run it on Monterey and Ventura. On the former it will work without any issues, on the other it will fail, and we will get the following error:&#xA;2022-06-14 05:59:55.254678+0200 0x5481 Default 0x0 0 0 kernel: (AppleMobileFileIntegrity) AMFI: Launch Constraint Violation (enforcing), error info: c[1]p[1]m[1]e[2], (Constraint not matched) launching proc[vc: 1 pid: 1112]: /Users/ace/Terminal.</description>
    </item>
    <item>
      <title>The AMFI MACF policy system call</title>
      <link>https://theevilbit.github.io/posts/amfi_syscall/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/amfi_syscall/</guid>
      <description>On macOS, one popular technique to inject code into other applications is leveraging the DYLD_INSERT_LIBRARIES environment variable, which I wrote about in 2019 DYLD_INSERT_LIBRARIES DYLIB injection in macOS / OSX. This variable can store a colon-separated list of dynamic libraries to load before the ones specified in the target process.&#xA;Several limitations apply to when this injection technique can be used and when it cannot, which I also discussed. I revisited this topic, not only because things might have changed since then but also to ensure that I didnâ€™t miss anything.</description>
    </item>
  </channel>
</rss>
