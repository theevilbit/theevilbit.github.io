<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2022 on theevilbit blog</title>
    <link>https://theevilbit.github.io/year/2022/</link>
    <description>Recent content in 2022 on theevilbit blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 14 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://theevilbit.github.io/year/2022/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AMFI Launch Constraints - First Quick Look</title>
      <link>https://theevilbit.github.io/posts/amfi_launch_constraints/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/amfi_launch_constraints/</guid>
      <description>Dropping some initial quick notes for a new security feature I run into on macOS Ventura. It&amp;rsquo;s called &amp;ldquo;Launch Constraints&amp;rdquo; and lives inside AMFI.
Do the following experiment: Copy Terminal.app to your HOME folder and try to run it on Monterey and Ventura. On the former it will work without any issues, on the other it will fail, and we will get the following error:
2022-06-14 05:59:55.254678+0200 0x5481 Default 0x0 0 0 kernel: (AppleMobileFileIntegrity) AMFI: Launch Constraint Violation (enforcing), error info: c[1]p[1]m[1]e[2], (Constraint not matched) launching proc[vc: 1 pid: 1112]: /Users/ace/Terminal.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 29 - amstoold</title>
      <link>https://theevilbit.github.io/beyond/beyond_0029/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0029/</guid>
      <description>This is part 29 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 When doing some research on macOS I came across the following LaunchAgent: /System/Library/LaunchAgents/com.apple.amstoold.plist. Its content is the following.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt; &amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt; &amp;lt;dict&amp;gt; 	&amp;lt;key&amp;gt;EnablePressuredExit&amp;lt;/key&amp;gt; 	&amp;lt;true/&amp;gt; 	&amp;lt;key&amp;gt;EnableTransactions&amp;lt;/key&amp;gt; 	&amp;lt;true/&amp;gt; 	&amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt; 	&amp;lt;string&amp;gt;com.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 28 - Authorization Plugins</title>
      <link>https://theevilbit.github.io/beyond/beyond_0028/</link>
      <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0028/</guid>
      <description>This is part 28 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 This persistence mechanism was described in very detail by Chris Ross in his blogpost: Persistent Credential Theft with Authorization Plugins. He also developed sample code, which can be found on his GitHub. Thus this blog will only focus on the high level summary, and some changes that happened since he wrote that post.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 27 - Dock shortcuts</title>
      <link>https://theevilbit.github.io/beyond/beyond_0027/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0027/</guid>
      <description>This is part 27 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 This persistence is another gem I found in Leo Pitt&amp;rsquo;s Modern macOS Persistence talk.
macOS Dock stores shortcuts for applications, that we would like to access through the, well&amp;hellip; Dock. It stores all settings in ~/Library/Preferences/com.apple.dock.plist. Although we can edit this PLIST directly, we can also use the defaults utility to change it.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 26 - Finder Sync Plugins</title>
      <link>https://theevilbit.github.io/beyond/beyond_0026/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0026/</guid>
      <description>This is part 26 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 This method was documented very detailed by Patrick Wardle in his blogpost back in 2016. It was also covered by Leo Pitt in his Modern macOS Persistence talk, and he also made a POC, which can be found at his GitHub.</description>
    </item>
    
  </channel>
</rss>
