<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lpe on theevilbit blog</title>
    <link>https://theevilbit.github.io/tags/lpe/</link>
    <description>Recent content in Lpe on theevilbit blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 24 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://theevilbit.github.io/tags/lpe/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CVE-2023-40424 - How Malware Can Bypass Transparency Consent and Control</title>
      <link>https://theevilbit.github.io/posts/cve-2023-40424/</link>
      <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2023-40424/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CVE-2023-40424 is a vulnerability that allows a root-level user to create a new user with a custom Transparency Consent and Control (TCC) database in macOS, which can then be used to access other users’ private data.&lt;/p&gt;&#xA;&lt;p&gt;First discovered back in 2022, the vulnerability was fixed by Apple in 2023 in macOS Sonoma’s initial release. But it was not fixed in earlier versions of macOS—one more reason users and admins should update their Mac computers to Sonoma.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Apple Mitigates Vulnerabilities in Installer Scripts</title>
      <link>https://theevilbit.github.io/posts/apple-mitigates-vulnerabilities-installer-scripts/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/apple-mitigates-vulnerabilities-installer-scripts/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Vulnerabilities are hot topics inside the world of security research and—because of their potentially dramatic impacts—outside as well. Unfortunately, the strategies and tactics that companies like Apple take to prevent specific vulnerabilities—or even entire families of exploits—typically attract less attention. But the fact is that engineering high-impact mitigations is typically more challenging than finding a single vulnerability.&lt;/p&gt;&#xA;&lt;p&gt;In this post, we’ll look at Apple&amp;rsquo;s recent efforts to mitigate an entire class of installer-script vulnerabilities. We will cover:&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2017-2533 - The details behind</title>
      <link>https://theevilbit.github.io/posts/cve-2017-2533/</link>
      <pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2017-2533/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://support.apple.com/en-us/HT207797&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2017-2533&lt;/a&gt;  was part of a chain of vulnerabilities, used at pwn2own 2017 found by the phoenhex team. They wrote a blogpost about it &lt;a href=&#34;https://phoenhex.re/2017-06-09/pwn2own-diskarbitrationd-privesc&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. This vulnerability led me to find CVE-2022-32780, which I detailed at &lt;a href=&#34;https://www.blackhat.com/asia-22/briefings/schedule/index.html#macos-vulnerabilities-hiding-in-plain-sight-26073&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Black Hat Asia 2022&lt;/a&gt;. Although the nature of CVE-2017-2533 was discussed by the authors, but the actual code part was never truly revealed, and I always wondered about the full details. Now I took the time to dig up the details, including how it was fixed, and why the fix solves the problem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2021-30808 - CVE-2021-1784 strikes back - TCC bypass via mounting</title>
      <link>https://theevilbit.github.io/posts/cve-2021-30808/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2021-30808/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CVE-2021-1784 was a vulnerability that allowed an attacker to bypass TCC by mounting over the  &lt;code&gt;~/Library/Application Support/com.apple.TCC&lt;/code&gt; directory and providing a new TCC database. We covered this with &lt;a href=&#34;https://twitter.com/_r3ggi&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wojciech Regula&lt;/a&gt; in or &lt;a href=&#34;https://www.slideshare.net/CsabaFitzl/20-ways-to-bypass-your-mac-os-privacy-mechanisms&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;20+ ways to bypass your mac os privacy mechanisms&lt;/a&gt; BlackHat USA talk. This was properly fixed in Big Sur.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-vulnerability&#34;&gt;&#xA;  The Vulnerability&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-vulnerability&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;I don&amp;rsquo;t know why but I started to experiment with it again in the very first version of Monterey beta, and found that although the exploit doesn&amp;rsquo;t work, we can mount over the &lt;code&gt;~/Library&lt;/code&gt; directory. Interestingly this wasn&amp;rsquo;t possible in Big Sur, thus this bug is a regression.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NOCVE - TeamViewer Local Privilege Escalation Vulnerability</title>
      <link>https://theevilbit.github.io/posts/teamviewer_lpe/</link>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/teamviewer_lpe/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is a rather old vulnerability I found in TeamViewer back in 2020, and reported it through VCP/iDefense. TeamViewer fixed the vulnerability last November, but somehow I missed it, and became aware of it only recently. Their advisory can be found here:&#xA;&lt;a href=&#34;https://community.teamviewer.com/English/discussion/107710/november-updates-security-patches&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;November updates - Security patches — TeamViewer Support&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The TeamViewer macOS client used a PrivilegedHelperTool named &lt;code&gt;com.teamviewer.Helper&lt;/code&gt; to perform specific tasks that require &lt;code&gt;root&lt;/code&gt;&#xA;permissions. Back in 2020 it used a deprecate model to perform IPC communication, called Distributed Objects. It was wide open, and any client could invoke the remote object&amp;rsquo;s functions, and some of those lead to direct privilege escalation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-9900 &amp; CVE-2021-1786 - Abusing macOS Crash Reporter</title>
      <link>https://theevilbit.github.io/posts/macos_crashreporter/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/macos_crashreporter/</guid>
      <description>&lt;p&gt;I plan to discuss two symlink attacks in this blog post. The first, more severe one, CVE-2020-9900 was reported by Zhongcheng Li (&lt;a href=&#34;https://twitter.com/0x434B01&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CK01&lt;/a&gt;) of Zero-dayits Team of Legendsec at Qi&amp;rsquo;anxin Group, and fixed in &lt;a href=&#34;https://support.apple.com/en-us/HT211289&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Catalina 10.15.6&lt;/a&gt;. Apple&amp;rsquo;s advisory said that with a symlink attack it was possible to elevate privileges. I never saw a public document about this bug, so I only assume that I will describe the actual issue here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-9771 - Reversing Engineering the Fix</title>
      <link>https://theevilbit.github.io/posts/reversing_cve_2020_9771/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/reversing_cve_2020_9771/</guid>
      <description>&lt;p&gt;When I originally found the &lt;code&gt;mount_apfs&lt;/code&gt; bug back in December, 2019, I honestly had no idea what was the root cause of it, nor had a clue how to even start looking into it. The only thing I knew for sure that the answer is within kernel. My macOS knowledge was still quite fresh that time (and even today), and was busy with so many other stuff that I never had the time to start looking into it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-9771 - mount_apfs TCC bypass and privilege escalation</title>
      <link>https://theevilbit.github.io/posts/cve_2020_9771/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve_2020_9771/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We could mount the entire file system through APFS snapshots as read-only, with the &lt;code&gt;noowners&lt;/code&gt; flag, which enables us accessing (almost) every file in the file system, including data (documents, files, etc&amp;hellip;) of every user on the system, including those protected by Apple&amp;rsquo;s privacy framework (TCC). Even with the Guest account we could read files of admin accounts as Guest! 😱&lt;/p&gt;&#xA;&lt;p&gt;This could be achieved with a single command, for example:&#xA;&lt;code&gt;mount_apfs -o noowners -s com.apple.TimeMachine.2019-11-17-141812.local /System/Volumes/Data /tmp/snap&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14977 - Secure coding XPC Services - Part 5 - PID reuse attacks</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part5/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part5/</guid>
      <description>&lt;p&gt;In the last post of the series we will see another typical issue, where XPC services using the connecting process&amp;rsquo;s ID (PID) to verify the client instead of the audit token. We will use F-Secure SAFE again for our case study, the vulnerability was fixed in 17.8 and it was assigned CVE-2020-14977.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-root-cause&#34;&gt;&#xA;  The root cause&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-root-cause&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The XPC services of F-Secure SAFE use the process ID (PID) to verify the client&amp;rsquo;s signature, as can be seen in the code below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14978 - Secure coding XPC Services - Part 4 - Improved client authorization</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part4/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part4/</guid>
      <description>&lt;h1 id=&#34;f-secure-safe-xpc-service-exploitation-cve-2020-14978&#34;&gt;&#xA;  F-Secure SAFE XPC service exploitation (CVE-2020-14978)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#f-secure-safe-xpc-service-exploitation-cve-2020-14978&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this post we will look into an other case study which will show us (again) why XPC client verification is crucial in XPC security, and how added authorization checks can slightly improve (but not fix) the problem. The F-Secure SAFE XPC services installed on macOS were not sufficiently hardened, and a malicious actor had the ability to interact with them. The vulnerability was fixed in version 17.8, it allowed an attacker to query specific settings, or if authorization used, it could prompt a user for password on behalf of F-Secure and ask for permissions to change settings.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-0984 - Secure coding XPC Services - Part 3 - Incorrect client verification</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part3/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part3/</guid>
      <description>&lt;h1 id=&#34;microsoft-autoupdate-macos-privilege-escalation-vulnerability-cve-2020-0984&#34;&gt;&#xA;  Microsoft AutoUpdate macOS privilege escalation vulnerability (CVE-2020-0984)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#microsoft-autoupdate-macos-privilege-escalation-vulnerability-cve-2020-0984&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is the third post in my series which is trying to help Apple developers to avoid typical insecure coding practices. This one will highlight why XPC client hardening and proper verification is extremely important when we use XPC messaging on macOS between clients that run as a normal user and services that run as root. If this validation is not right, it opens up the possibility for an attacker to run privileged commands or worse case, achieve full privilege escalation on the system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TALK - Exploiting directory permissions on macOS</title>
      <link>https://theevilbit.github.io/posts/exploiting_directory_permissions_on_macos/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/exploiting_directory_permissions_on_macos/</guid>
      <description>&lt;p&gt;This research started around summer time in 2019, when everything settled down after my talk in 2019, where I detailed how did I gained root privileges via a benign App Store application, that I developed. That exploit used a symlink to achieve this, so I though I will make a more general approach and see if this type of vulnerability exists in other places as well on macOS systems. As it turns out it does exists, and not just on macOS directly but also on other apps, it appears to be a very fruitful of issue, without too much effort I found 5 exploitable bugs on macOS, 3 in Adobe installers. In the following post I will first go over the permission model of the macOS filesystem, with focus on the POSIX part, discuss some of the non trivial cases it can produce, and also give a brief overview how it is extended. I won&amp;rsquo;t cover every single detail of the permission model, as it would be a topic in itself, but rather what I found interesting from the exploitation perspective.&#xA;Then I will cover how to find these bugs, and finally I will go through in detail all of the bugs I found. Some of these are very interesting as we will see, as exploitation of them involves &amp;ldquo;writing&amp;rdquo; to files owned by root, while we are not root, which is not trivial, and can be very tricky.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2019-20057 - Secure coding XPC services - Part 1 - Why EvenBetterAuthorization is not enough?</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part1/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part1/</guid>
      <description>&lt;p&gt;This is the first part of a blog post series I plan about PrivilegedHelperTools that exists on macOS systems. I recently took a look on a couple of these tools, and found that it&amp;rsquo;s very easy to make the code insecure, as there are many small pieces to it, and if one is done wrong, the helper tool will be open to abuse by anyone having a foothold on the system. Depending on the application this might be limited to certain privileged actions (setting system configurations, mounting, etc&amp;hellip;), and in some cases it&amp;rsquo;s more broad, and thus a full privilege escalation can be performed. Ideally only the real client application should be able to talk to the helper tool, and all other connections should be refused.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14974 &amp; CVE-2020-14975 - IOBit Unlocker 1.1.2 - Local Privilege Escalation</title>
      <link>https://theevilbit.github.io/posts/iobit_unlocker_lpe/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/iobit_unlocker_lpe/</guid>
      <description>&lt;p&gt;IOBit’s Unlocker program is advertised to solve the following issues:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;IObit Unlocker performs well in solving “cannot delete files”, “access is denied”, “The file is in use by another program or user”, or “There has been a sharing violation” problems. With IObit Unlocker, you can manage all your files the way you want.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;and even:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;With “Unlock &amp;amp; Delete”, “Unlock &amp;amp; Rename”, “Unlock &amp;amp; Move”, and “Unlock &amp;amp; Copy”, IObit Unlocker offers easier ways to unlock and manage the files and folders to keep them safe and available.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UninstallString - a possible LPE via Social Engineering</title>
      <link>https://theevilbit.github.io/posts/uninstallstring_a_possible_lpe_via_social_engineering/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/uninstallstring_a_possible_lpe_via_social_engineering/</guid>
      <description>&lt;p&gt;Whenever you install an application on Windows, typically through MSI, there is a registry key created, with plenty of information for uninstallation, like the uninstaller location, install date, publisher, etc… you can find all of the options here:&#xA;&lt;a href=&#34;https://nsis.sourceforge.io/Add_uninstall_information_to_Add/Remove_Programs&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Add uninstall information to Add/Remove Programs - NSIS&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;In case an application is installed for the current user and not for all user, the Installation/Uninstallation details will go to the &lt;code&gt;Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\&lt;/code&gt; registry key instead of the &lt;code&gt;HKLM&lt;/code&gt; hive. For example OneDrive has all the information under the following registry key: &lt;code&gt;Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\OneDriveSetup.exe&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>DYLD_INSERT_LIBRARIES DYLIB injection in macOS / OSX</title>
      <link>https://theevilbit.github.io/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/</guid>
      <description>&lt;p&gt;After my recent blog post, my old mate &lt;a href=&#34;https://twitter.com/_Dark_Knight_&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@_Dark_Knight_&lt;/a&gt; reached out to me and he asked me a question:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;“Do you typically callout user apps that allow dyld_insert_libraries?”&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;And a few similar ones, and I will be honest, I had no idea what is he talking about, if only I understood the question :D Despite the fact that my recent blog posts and talks are about macOS, I deal much more with Windows on a daily basis, probably like 95%, and macOS is still a whole new territory for me. So I decided to dig into the question and learn a bit more about this.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TALK - macOS - Getting root with benign AppStore apps</title>
      <link>https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/</guid>
      <description>&lt;p&gt;This writeup is intended to be a bit of storytelling. I would like to show how I went down the rabbit hole in a quick ’research’ I wanted to do, and eventually found a local privilege escalation vulnerability in macOS. I also want to show, tell about all the obstacles and failures I run into, stuff that people don’t talk about usually, but I feel it’s part of the process all of us go through, when we try to create something.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
