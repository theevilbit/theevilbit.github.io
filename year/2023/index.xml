<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2023 on theevilbit blog</title>
    <link>https://theevilbit.github.io/year/2023/</link>
    <description>Recent content in 2023 on theevilbit blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 09 Oct 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://theevilbit.github.io/year/2023/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Launch and Environment Constraints Deep Dive</title>
      <link>https://theevilbit.github.io/posts/launch_constraints_deep_dive/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/launch_constraints_deep_dive/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;UPDATE 2023.10.10.: After chatting with Thijs Alkemade, &lt;a href=&#34;https://mastodon.social/@xnyhps@infosec.exchange&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@xnyhps&lt;/a&gt;, updated the XPC part of the post as I originally misunderstood Apple&amp;rsquo;s intent.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Apple introduced Launch Constraints in macOS Ventura (13) as a response to some common attack scenarios. LC was probably the most impactful mitigation against various type of vulnerabilities. Before we dwell into LC let&amp;rsquo;s review a couple of old vulnerabilities, which would have been not exploitable if LC was present.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 32 - Dock Tile Plugins</title>
      <link>https://theevilbit.github.io/beyond/beyond_0032/</link>
      <pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0032/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 32 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;When you write a series about something, there are some episodes which are less interesting, many boring stuff, but sometimes there are some true gems. While doing some research yesterday, I run into the Dock Tile Plugin feature in macOS, which turned out to be truly amazing from persistence point of view.&lt;/p&gt;</description>
    </item>
    <item>
      <title>macOS Service Management - The SMAppService API - Quick Notes</title>
      <link>https://theevilbit.github.io/posts/smappservice/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/smappservice/</guid>
      <description>&lt;p&gt;This is just a super quick post and some notes, about my experiences with SMAppService.&lt;/p&gt;&#xA;&lt;p&gt;Apple introduced the SMAppService API in macOS Ventura (13) to replace the older SMJobBless and SMLoginItemSetEnabled APIs. SMAppService should be used now to register any new Login Item, Launch Agent or Daemon.&lt;/p&gt;&#xA;&lt;p&gt;The API is super easy to use, even I could learn it from the developer docs, which is a big thing, and it means that it is indeed really easy as I suck as a developer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 31 - BSM audit framework</title>
      <link>https://theevilbit.github.io/beyond/beyond_0031/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0031/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 31 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;macOS implements the OpenBSM audit framework created by McAfee, which allows someone to audit system events, like login, file access, etc… This has been part of the system for very long time. Auditing has several components, the main one being the kernel, which handles all the events. The main user mode process is &lt;code&gt;auditd&lt;/code&gt;, which is mainly responsible for logging. It’s a huge framework, detailed very well by Jonathan Levin in his &lt;code&gt;*OS Internal Part 3&lt;/code&gt; book. I suggest reading that part, but you can also find some information here:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 30 - The man config file - man.conf</title>
      <link>https://theevilbit.github.io/beyond/beyond_0030/</link>
      <pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/beyond/beyond_0030/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is part 30 in the series of &amp;ldquo;Beyond the good ol&amp;rsquo; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the &lt;a href=&#34;https://theevilbit.github.io/beyond/beyond_intro/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;I was watching an old BSidesLuxemburg 2019 talk by Aaron Jewitt, called &amp;ldquo;Threat Hunting On Linux And Mac With Auditbeat System Module&amp;rdquo;, it&amp;rsquo;s up on &lt;a href=&#34;https://www.youtube.com/watch?v=teq6r7XbBug&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;/a&gt;. Aaron mentioned in one of the slides that you can persist using &lt;code&gt;man.conf&lt;/code&gt; files. It looked really odd, I tried to quickly Google it, but haven’t found anything about it. So I took a look at the configuration file, and indeed, it turns out you can persist via man’s configuration file, &lt;code&gt;man.conf&lt;/code&gt;, which can be found at &lt;code&gt;/private/etc/man.conf&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2022-22655 - TCC - Location Services Bypass</title>
      <link>https://theevilbit.github.io/posts/cve-2022-22655/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2022-22655/</guid>
      <description>&lt;p&gt;This is a quick blogpost about a vulnerability I covered in our &lt;a href=&#34;https://www.blackhat.com/eu-22/briefings/schedule/index.html#knockout-win-against-tcc----new-ways-to-bypass-your-macos-privacy-mechanisms-29272&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Black Hat Europe 2022 talk&lt;/a&gt; with &lt;a href=&#34;https://twitter.com/_r3ggi&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wojciech Regula&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In contrary to what people would expect, clients which can access location services are not maintained in one of the TCC databased, but in a separate location, and it&amp;rsquo;s maintained by locationd. This has been also recently covered by Howard Oakley, in his &lt;a href=&#34;https://eclecticlight.co/2023/02/10/privacy-what-tcc-does-and-doesnt/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Privacy: what TCC does and doesn’t&lt;/a&gt; blogpost.&lt;/p&gt;&#xA;&lt;p&gt;TCC&amp;rsquo;s location services allowed client list is located inside &lt;code&gt;/var/db/locationd/clients.plist&lt;/code&gt;. This file is protected by the Sandbox/TCC, thus we can&amp;rsquo;t modify it, and add new client, even if we have root privileges.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
