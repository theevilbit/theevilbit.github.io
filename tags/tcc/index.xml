<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tcc on theevilbit blog</title>
    <link>https://theevilbit.github.io/tags/tcc/</link>
    <description>Recent content in Tcc on theevilbit blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 24 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://theevilbit.github.io/tags/tcc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CVE-2023-40424 - How Malware Can Bypass Transparency Consent and Control</title>
      <link>https://theevilbit.github.io/posts/cve-2023-40424/</link>
      <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2023-40424/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CVE-2023-40424 is a vulnerability that allows a root-level user to create a new user with a custom Transparency Consent and Control (TCC) database in macOS, which can then be used to access other usersâ€™ private data.&lt;/p&gt;&#xA;&lt;p&gt;First discovered back in 2022, the vulnerability was fixed by Apple in 2023 in macOS Sonomaâ€™s initial release. But it was not fixed in earlier versions of macOSâ€”one more reason users and admins should update their Mac computers to Sonoma.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2022-22655 - TCC - Location Services Bypass</title>
      <link>https://theevilbit.github.io/posts/cve-2022-22655/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2022-22655/</guid>
      <description>&lt;p&gt;This is a quick blogpost about a vulnerability I covered in our &lt;a href=&#34;https://www.blackhat.com/eu-22/briefings/schedule/index.html#knockout-win-against-tcc----new-ways-to-bypass-your-macos-privacy-mechanisms-29272&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Black Hat Europe 2022 talk&lt;/a&gt; with &lt;a href=&#34;https://twitter.com/_r3ggi&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wojciech Regula&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In contrary to what people would expect, clients which can access location services are not maintained in one of the TCC databased, but in a separate location, and it&amp;rsquo;s maintained by locationd. This has been also recently covered by Howard Oakley, in his &lt;a href=&#34;https://eclecticlight.co/2023/02/10/privacy-what-tcc-does-and-doesnt/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Privacy: what TCC does and doesnâ€™t&lt;/a&gt; blogpost.&lt;/p&gt;&#xA;&lt;p&gt;TCC&amp;rsquo;s location services allowed client list is located inside &lt;code&gt;/var/db/locationd/clients.plist&lt;/code&gt;. This file is protected by the Sandbox/TCC, thus we can&amp;rsquo;t modify it, and add new client, even if we have root privileges.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2022-32929 - Bypass iOS backup&#39;s TCC protection</title>
      <link>https://theevilbit.github.io/posts/cve-2022-32929/</link>
      <pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2022-32929/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Normally, when a users backup their iOS device, the backup is saved into &lt;code&gt;~/Library/Application Support/MobileSync/Backup&lt;/code&gt; directory. The &lt;code&gt;MobileSync&lt;/code&gt; directory is properly protected by TCC, as the backup can contain photos, contact information, everything from the iOS device, and it might be unencrypted, so this is a whole lot of private information. It&amp;rsquo;s only accessible with Full Disk Access rights.&lt;/p&gt;&#xA;&lt;p&gt;The issue is that an attacker can invoke the &lt;code&gt;AppleMobileBackup&lt;/code&gt; utility and make a backup to a custom location. Thus completely bypassing the protected backup location.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2021-30808 - CVE-2021-1784 strikes back - TCC bypass via mounting</title>
      <link>https://theevilbit.github.io/posts/cve-2021-30808/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve-2021-30808/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CVE-2021-1784 was a vulnerability that allowed an attacker to bypass TCC by mounting over the  &lt;code&gt;~/Library/Application Support/com.apple.TCC&lt;/code&gt; directory and providing a new TCC database. We covered this with &lt;a href=&#34;https://twitter.com/_r3ggi&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wojciech Regula&lt;/a&gt; in or &lt;a href=&#34;https://www.slideshare.net/CsabaFitzl/20-ways-to-bypass-your-mac-os-privacy-mechanisms&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;20+ ways to bypass your mac os privacy mechanisms&lt;/a&gt; BlackHat USA talk. This was properly fixed in Big Sur.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-vulnerability&#34;&gt;&#xA;  The Vulnerability&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-vulnerability&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;I don&amp;rsquo;t know why but I started to experiment with it again in the very first version of Monterey beta, and found that although the exploit doesn&amp;rsquo;t work, we can mount over the &lt;code&gt;~/Library&lt;/code&gt; directory. Interestingly this wasn&amp;rsquo;t possible in Big Sur, thus this bug is a regression.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-9771 - mount_apfs TCC bypass and privilege escalation</title>
      <link>https://theevilbit.github.io/posts/cve_2020_9771/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/cve_2020_9771/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We could mount the entire file system through APFS snapshots as read-only, with the &lt;code&gt;noowners&lt;/code&gt; flag, which enables us accessing (almost) every file in the file system, including data (documents, files, etc&amp;hellip;) of every user on the system, including those protected by Apple&amp;rsquo;s privacy framework (TCC). Even with the Guest account we could read files of admin accounts as Guest! ðŸ˜±&lt;/p&gt;&#xA;&lt;p&gt;This could be achieved with a single command, for example:&#xA;&lt;code&gt;mount_apfs -o noowners -s com.apple.TimeMachine.2019-11-17-141812.local /System/Volumes/Data /tmp/snap&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
