<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019 on theevilbit blog</title>
    <link>https://theevilbit.github.io/year/2019/</link>
    <description>Recent content in 2019 on theevilbit blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 25 Oct 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://theevilbit.github.io/year/2019/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GateKeeper - Bypass or not bypass?</title>
      <link>https://theevilbit.github.io/posts/gatekeeper_bypass_or_not_bypass/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/gatekeeper_bypass_or_not_bypass/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;On macOS Mojave Gatekeeper only verifies executables, which are run with the &lt;code&gt;open&lt;/code&gt; command or the user double clicks. It won’t verify files, that are executed through other means like, directly executing a binary &lt;code&gt;./myapp&lt;/code&gt; regardless of the quarantine attribute. If you can place a plist file inside LaunchAgents/LaunchDaemons, the command inside will also be executed. Prior to Catalina there is a way to trick users to drag &amp;amp; drop files in the LaunchAgents folder.&#xA;On macOS Catalina lot has changed, the most notable one regarding gatekeeper is that it will verify files when executed via classic ‘exec’ methods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14974 &amp; CVE-2020-14975 - IOBit Unlocker 1.1.2 - Local Privilege Escalation</title>
      <link>https://theevilbit.github.io/posts/iobit_unlocker_lpe/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/iobit_unlocker_lpe/</guid>
      <description>&lt;p&gt;IOBit’s Unlocker program is advertised to solve the following issues:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;IObit Unlocker performs well in solving “cannot delete files”, “access is denied”, “The file is in use by another program or user”, or “There has been a sharing violation” problems. With IObit Unlocker, you can manage all your files the way you want.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;and even:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;With “Unlock &amp;amp; Delete”, “Unlock &amp;amp; Rename”, “Unlock &amp;amp; Move”, and “Unlock &amp;amp; Copy”, IObit Unlocker offers easier ways to unlock and manage the files and folders to keep them safe and available.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NOCVE - Few click RCE via GitHub Desktop macOS client with Gatekeeper bypass and custom URL handlers</title>
      <link>https://theevilbit.github.io/posts/few_click_rce_via_github_desktop_macos_client_with_gatekeeper_bypass_and_custom_url_handlers/</link>
      <pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/few_click_rce_via_github_desktop_macos_client_with_gatekeeper_bypass_and_custom_url_handlers/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The GitHub Desktop app doesn’t add the quarantine extended attribute to files downloaded from the web, and this along with macOS’s URL handler auto-registration feature allows an attacker to execute arbitrary, even unsigned code on a macOS system. If we don’t count the clicks required to open the GitHub App, and cloning an external repository, then this is a 2 click RCE.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UninstallString - a possible LPE via Social Engineering</title>
      <link>https://theevilbit.github.io/posts/uninstallstring_a_possible_lpe_via_social_engineering/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/uninstallstring_a_possible_lpe_via_social_engineering/</guid>
      <description>&lt;p&gt;Whenever you install an application on Windows, typically through MSI, there is a registry key created, with plenty of information for uninstallation, like the uninstaller location, install date, publisher, etc… you can find all of the options here:&#xA;&lt;a href=&#34;https://nsis.sourceforge.io/Add_uninstall_information_to_Add/Remove_Programs&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Add uninstall information to Add/Remove Programs - NSIS&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;In case an application is installed for the current user and not for all user, the Installation/Uninstallation details will go to the &lt;code&gt;Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\&lt;/code&gt; registry key instead of the &lt;code&gt;HKLM&lt;/code&gt; hive. For example OneDrive has all the information under the following registry key: &lt;code&gt;Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\OneDriveSetup.exe&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>A simple protection against HMValidateHandle technique</title>
      <link>https://theevilbit.github.io/posts/a_simple_protection_against_hmvalidatehandle_technique/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/a_simple_protection_against_hmvalidatehandle_technique/</guid>
      <description>&lt;p&gt;In the recent days I was reading technical analysis of win32k exploits from recent years, and it caught my eyes, that the HMValidateHandle technique is very heavily used almost everywhere. Then I had an idea how to protect against this family of exploits, which I think is very simple. This post will be about that.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-hmvalidatehandle&#34;&gt;&#xA;  What is HMValidateHandle?&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-is-hmvalidatehandle&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;HMValidateHandle is an internal, unexported function of &lt;code&gt;user32.dll&lt;/code&gt;. It takes a handle and a handle type as arguments, and by looking up the handle table, if the handle is matching with the type it will copy the object to user memory. If the object contains a pointer to itself, like &lt;code&gt;tagWND&lt;/code&gt; it can be used to leak memory addresses from the kernel. This has been a known technique for very long time, I think the first mention of this was in Tarjei Mandt’s 2011 BlackHat US talk, you can find the PDF here: &lt;a href=&#34;https://media.blackhat.com/bh-us-11/Mandt/BH_US_11_Mandt_win32k_WP.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://media.blackhat.com/bh-us-11/Mandt/BH_US_11_Mandt_win32k_WP.pdf&lt;/a&gt;&#xA;There are awful lot of documentation about this, and it was widely abused in many-many Windows kernel exploits, as you could reliably leak kernel object addresses, especially useful for kernel pool spraying. Thus Microsoft decided to finally close this, and so this technique doesn’t work beyond Windows 10 RS4.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DYLD_INSERT_LIBRARIES DYLIB injection in macOS / OSX</title>
      <link>https://theevilbit.github.io/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/</guid>
      <description>&lt;p&gt;After my recent blog post, my old mate &lt;a href=&#34;https://twitter.com/_Dark_Knight_&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@_Dark_Knight_&lt;/a&gt; reached out to me and he asked me a question:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;“Do you typically callout user apps that allow dyld_insert_libraries?”&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;And a few similar ones, and I will be honest, I had no idea what is he talking about, if only I understood the question :D Despite the fact that my recent blog posts and talks are about macOS, I deal much more with Windows on a daily basis, probably like 95%, and macOS is still a whole new territory for me. So I decided to dig into the question and learn a bit more about this.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TALK - macOS - Getting root with benign AppStore apps</title>
      <link>https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/</guid>
      <description>&lt;p&gt;This writeup is intended to be a bit of storytelling. I would like to show how I went down the rabbit hole in a quick ’research’ I wanted to do, and eventually found a local privilege escalation vulnerability in macOS. I also want to show, tell about all the obstacles and failures I run into, stuff that people don’t talk about usually, but I feel it’s part of the process all of us go through, when we try to create something.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2020-14976 - GNS3 ubridge SETUID bit - arbitrary file read</title>
      <link>https://theevilbit.github.io/posts/gns3_ubridge_setuid_bit_arbitrary_file_read/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/gns3_ubridge_setuid_bit_arbitrary_file_read/</guid>
      <description>&lt;p&gt;A couple of weeks ago, I had the idea of scanning my Mac for files that has the SUID bit set, I wanted to see if there is anything interesting showing up. You can do it this way:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/sudo find / -perm -4000 -exec /bin/ls -ldb &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt; &amp;gt; suidfilelist&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There was one item that caught my attention, and that was a file called &lt;code&gt;ubridge&lt;/code&gt; inside GNS3. I used to be a network guy, and GNS3 is a great tool to emulate real network gear, practice configuration, etc.. I highly recommend for anyone who learns networking. This was the file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2019-5514 - VMware Fusion 11 - Guest VM RCE</title>
      <link>https://theevilbit.github.io/posts/vmware_fusion_11_guest_vm_rce_cve-2019-5514/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/vmware_fusion_11_guest_vm_rce_cve-2019-5514/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;You can run an arbitrary command on a VMware Fusion guest VM through a website without any priory knowledge. Basically VMware Fusion is starting up a websocket listening only on the localhost. You can fully control all the VMs (also create/delete snapshots, whatever you want) through this websocket interface, including launching apps. You need to have VMware Tools installed on the guest for launching apps, but honestly who doesn’t have it installed. So with creating a javascript on a website, you can interact with the undocumented API, and yes it’s all unauthenticated.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
