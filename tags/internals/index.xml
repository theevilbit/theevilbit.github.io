<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Internals on theevilbit blog</title>
    <link>https://theevilbit.github.io/tags/internals/</link>
    <description>Recent content in Internals on theevilbit blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 09 Oct 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://theevilbit.github.io/tags/internals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Launch and Environment Constraints Deep Dive</title>
      <link>https://theevilbit.github.io/posts/launch_constraints_deep_dive/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/launch_constraints_deep_dive/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;UPDATE 2023.10.10.: After chatting with Thijs Alkemade, &lt;a href=&#34;https://mastodon.social/@xnyhps@infosec.exchange&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@xnyhps&lt;/a&gt;, updated the XPC part of the post as I originally misunderstood Apple&amp;rsquo;s intent.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Apple introduced Launch Constraints in macOS Ventura (13) as a response to some common attack scenarios. LC was probably the most impactful mitigation against various type of vulnerabilities. Before we dwell into LC let&amp;rsquo;s review a couple of old vulnerabilities, which would have been not exploitable if LC was present.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AMFI Launch Constraints - First Quick Look</title>
      <link>https://theevilbit.github.io/posts/amfi_launch_constraints/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/amfi_launch_constraints/</guid>
      <description>&lt;p&gt;Dropping some initial quick notes for a new security feature I ran into on macOS Ventura. It&amp;rsquo;s called &amp;ldquo;Launch Constraints&amp;rdquo; and lives inside AMFI.&lt;/p&gt;&#xA;&lt;p&gt;Do the following experiment: Copy &lt;code&gt;Terminal.app&lt;/code&gt; to your HOME folder and try to run it on Monterey and Ventura. On the former it will work without any issues, on the other it will fail, and we will get the following error:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2022-06-14 05:59:55.254678+0200 0x5481     Default     0x0                  0      0&#xA;kernel: (AppleMobileFileIntegrity) AMFI: Launch Constraint Violation (enforcing), error&#xA;info: c[1]p[1]m[1]e[2], (Constraint not matched) launching proc[vc: 1 pid: 1112]:&#xA;/Users/ace/Terminal.app/Contents/MacOS/Terminal, launch type 0, failure proc [vc: 1 pid:&#xA;1112]: /Users/ace/Terminal.app/Contents/MacOS/Terminal&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is interesting. If we copy it to other locations, it will fail as well. The reason looks to be something called &amp;ldquo;Launch Constraint&amp;rdquo;. So it seems that it will disallow the execution of system apps outside their location. This is pretty nice, as this has been abused plenty of times in the past, as moving them out of their place usually allowed someone inject code into them. Remember these TCC bypasses?&lt;/p&gt;</description>
    </item>
    <item>
      <title>macOS Monterey Shortcuts - First look</title>
      <link>https://theevilbit.github.io/posts/monterey_shortcuts/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/monterey_shortcuts/</guid>
      <description>&lt;p&gt;Apple announced macOS Monterey (macOS 12) this week at WWDC, and one of its new features that caught my eye is &lt;strong&gt;Shortcuts&lt;/strong&gt;. It&amp;rsquo;s already available on iOS, but it made its way to macOS. My security focused brain immediately thought about how cool this feature could be for red teamers or pentesters to persist on macOS :) So I decided to take a quick look on the new functionality, focusing on how it works. All of the below information is based on macOS Monterey Developer Beta 1.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About com.apple.private.security.clear-library-validation</title>
      <link>https://theevilbit.github.io/posts/com.apple.private.security.clear-library-validation/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/com.apple.private.security.clear-library-validation/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;&#xA;  TL;DR&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tldr&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;On macOS 10.15.2 Apple introduced the &lt;code&gt;com.apple.private.security.clear-library-validation&lt;/code&gt; entitlement, which is slowly replacing the previously used &lt;code&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt; entitlement on system binaries. Although their impact is the about the same, the way they work is different. While library validation is automatically disabled using &lt;code&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt;, with &lt;code&gt;com.apple.private.security.clear-library-validation&lt;/code&gt;, the application has to disable it for itself through a &lt;code&gt;csops&lt;/code&gt; system call.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;With the release of Big Sur, I noticed that many of the system binaries have a new entitlement, which I didn&amp;rsquo;t see before, and that is &lt;code&gt;com.apple.private.security.clear-library-validation&lt;/code&gt; (later it turned out that it was introduced earlier, but I didn&amp;rsquo;t know about it that time). These applications possessed the &lt;code&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt; before, so it seemed that this is being replaced with a new one. The name suggest similarity, and testing it also confirmed, that these binaries can still load third party plugins signed by non Apple developers. This means that these entitlements have the same impact.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let&#39;s talk macOS Authorization</title>
      <link>https://theevilbit.github.io/posts/macos_authorization/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/macos_authorization/</guid>
      <description>&lt;p&gt;This is a blog post I wanted to write for a while now, but somehow never got the time for it, and I also knew that it will require lots of time, so I kept delaying it. I finally kicked my ass, sat down, and wrote it.&lt;/p&gt;&#xA;&lt;p&gt;The goal of the post is to cover many aspects of authorization, which I found interesting from security perspective. Honestly, partially for selfish reasons so I will have a goto summary when I need to lookup something later instead of browsing through 8-10 different articles. All of these information I try catch here in one post, are known, but spread all over the place in various blog posts and articles, and I never found a good, central location with all the details. Also some of the items are very confusing and it took me some time to clear things in my head as not everything is obvious or intuitive.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The AMFI MACF policy system call</title>
      <link>https://theevilbit.github.io/posts/amfi_syscall/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/amfi_syscall/</guid>
      <description>&lt;p&gt;On macOS, one popular technique to inject code into other applications is leveraging the &lt;code&gt;DYLD_INSERT_LIBRARIES&lt;/code&gt; environment variable, which I wrote about in 2019 &lt;a href=&#34;https://theevilbit.github.io/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DYLD_INSERT_LIBRARIES DYLIB injection in macOS / OSX&lt;/a&gt;. This variable can store a colon-separated list of dynamic libraries to load before the ones specified in the target process.&lt;/p&gt;&#xA;&lt;p&gt;Several limitations apply to when this injection technique can be used and when it cannot, which I also discussed. I revisited this topic, not only because things might have changed since then but also to ensure that I didnâ€™t miss anything. It turned out to be a wise move and a useful exercise.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kernel Debugging macOS with SIP</title>
      <link>https://theevilbit.github.io/posts/kernel_debugging_with_sip/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      <guid>https://theevilbit.github.io/posts/kernel_debugging_with_sip/</guid>
      <description>&lt;p&gt;As security researchers, we often find ourselves needing to look deep into various kernels to fully understand our target and accomplish our goals. Doing so on the Windows platform is no mystery, as there have been countless well-written posts about kernel debugging setups. For macOS, however, the situation is slightly different.&lt;/p&gt;&#xA;&lt;p&gt;There are many great posts describing how to set up kernel debugging between two machines, but all of them suggest that SIP (System Integrity Protection) should be disabled for kernel debugging. This creates a problem if we want to investigate the inner workings of macOSâ€™s security mechanisms, since turning off SIP will also turn off most of the foundational security features of the operating system.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
