<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tcc on theevilbit blog</title>
    <link>https://theevilbit.github.io/tags/tcc/</link>
    <description>Recent content in tcc on theevilbit blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 13 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://theevilbit.github.io/tags/tcc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CVE-2022-22655 - TCC - Location Services Bypass</title>
      <link>https://theevilbit.github.io/posts/cve-2022-22655/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/cve-2022-22655/</guid>
      <description>This is a quick blogpost about a vulnerability I covered in our Black Hat Europe 2022 talk with Wojciech Regula.
In contrary to what people would expect, clients which can access location services are not maintained in one of the TCC databased, but in a separate location, and it&amp;rsquo;s maintained by locationd. This has been also recently covered by Howard Oakley, in his Privacy: what TCC does and doesnâ€™t blogpost.</description>
    </item>
    
    <item>
      <title>CVE-2022-32929 - Bypass iOS backup&#39;s TCC protection</title>
      <link>https://theevilbit.github.io/posts/cve-2022-32929/</link>
      <pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/cve-2022-32929/</guid>
      <description>Intro Normally, when a users backup their iOS device, the backup is saved into ~/Library/Application Support/MobileSync/Backup directory. The MobileSync directory is properly protected by TCC, as the backup can contain photos, contact information, everything from the iOS device, and it might be unencrypted, so this is a whole lot of private information. It&amp;rsquo;s only accessible with Full Disk Access rights.
The issue is that an attacker can invoke the AppleMobileBackup utility and make a backup to a custom location.</description>
    </item>
    
    <item>
      <title>CVE-2021-30808 - CVE-2021-1784 strikes back - TCC bypass via mounting</title>
      <link>https://theevilbit.github.io/posts/cve-2021-30808/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/cve-2021-30808/</guid>
      <description>Intro CVE-2021-1784 was a vulnerability that allowed an attacker to bypass TCC by mounting over the ~/Library/Application Support/com.apple.TCC directory and providing a new TCC database. We covered this with Wojciech Regula in or 20+ ways to bypass your mac os privacy mechanisms BlackHat USA talk. This was properly fixed in Big Sur.
The Vulnerability I don&amp;rsquo;t know why but I started to experiment with it again in the very first version of Monterey beta, and found that although the exploit doesn&amp;rsquo;t work, we can mount over the ~/Library directory.</description>
    </item>
    
    <item>
      <title>CVE-2020-9771 - mount_apfs TCC bypass and privilege escalation</title>
      <link>https://theevilbit.github.io/posts/cve_2020_9771/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/cve_2020_9771/</guid>
      <description>TL;DR We could mount the entire file system through APFS snapshots as read-only, with the noowners flag, which enables us accessing (almost) every file in the file system, including data (documents, files, etc&amp;hellip;) of every user on the system, including those protected by Apple&amp;rsquo;s privacy framework (TCC). Even with the Guest account we could read files of admin accounts as Guest! ðŸ˜±
This could be achieved with a single command, for example: mount_apfs -o noowners -s com.</description>
    </item>
    
  </channel>
</rss>
