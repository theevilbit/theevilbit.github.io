<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cve on theevilbit blog</title>
    <link>https://theevilbit.github.io/tags/cve/</link>
    <description>Recent content in cve on theevilbit blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 13 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://theevilbit.github.io/tags/cve/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CVE-2022-22655 - TCC - Location Services Bypass</title>
      <link>https://theevilbit.github.io/posts/cve-2022-22655/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/cve-2022-22655/</guid>
      <description>This is a quick blogpost about a vulnerability I covered in our Black Hat Europe 2022 talk with Wojciech Regula.
In contrary to what people would expect, clients which can access location services are not maintained in one of the TCC databased, but in a separate location, and it&amp;rsquo;s maintained by locationd. This has been also recently covered by Howard Oakley, in his Privacy: what TCC does and doesnâ€™t blogpost.</description>
    </item>
    
    <item>
      <title>CVE-2022-32929 - Bypass iOS backup&#39;s TCC protection</title>
      <link>https://theevilbit.github.io/posts/cve-2022-32929/</link>
      <pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/cve-2022-32929/</guid>
      <description>Intro Link to heading Normally, when a users backup their iOS device, the backup is saved into ~/Library/Application Support/MobileSync/Backup directory. The MobileSync directory is properly protected by TCC, as the backup can contain photos, contact information, everything from the iOS device, and it might be unencrypted, so this is a whole lot of private information. It&amp;rsquo;s only accessible with Full Disk Access rights.
The issue is that an attacker can invoke the AppleMobileBackup utility and make a backup to a custom location.</description>
    </item>
    
    <item>
      <title>CVE-2017-2533 - The details behind</title>
      <link>https://theevilbit.github.io/posts/cve-2017-2533/</link>
      <pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/cve-2017-2533/</guid>
      <description>Intro Link to heading CVE-2017-2533 was part of a chain of vulnerabilities, used at pwn2own 2017 found by the phoenhex team. They wrote a blogpost about it here. This vulnerability led me to find CVE-2022-32780, which I detailed at Black Hat Asia 2022. Although the nature of CVE-2017-2533 was discussed by the authors, but the actual code part was never truly revealed, and I always wondered about the full details.</description>
    </item>
    
    <item>
      <title>CVE-2021-30808 - CVE-2021-1784 strikes back - TCC bypass via mounting</title>
      <link>https://theevilbit.github.io/posts/cve-2021-30808/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/cve-2021-30808/</guid>
      <description>Intro Link to heading CVE-2021-1784 was a vulnerability that allowed an attacker to bypass TCC by mounting over the ~/Library/Application Support/com.apple.TCC directory and providing a new TCC database. We covered this with Wojciech Regula in or 20+ ways to bypass your mac os privacy mechanisms BlackHat USA talk. This was properly fixed in Big Sur.
The Vulnerability Link to heading I don&amp;rsquo;t know why but I started to experiment with it again in the very first version of Monterey beta, and found that although the exploit doesn&amp;rsquo;t work, we can mount over the ~/Library directory.</description>
    </item>
    
    <item>
      <title>CVE-2020-9900 &amp; CVE-2021-1786 - Abusing macOS Crash Reporter</title>
      <link>https://theevilbit.github.io/posts/macos_crashreporter/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/macos_crashreporter/</guid>
      <description>I plan to discuss two symlink attacks in this blog post. The first, more severe one, CVE-2020-9900 was reported by Zhongcheng Li (CK01) of Zero-dayits Team of Legendsec at Qi&amp;rsquo;anxin Group, and fixed in Catalina 10.15.6. Apple&amp;rsquo;s advisory said that with a symlink attack it was possible to elevate privileges. I never saw a public document about this bug, so I only assume that I will describe the actual issue here.</description>
    </item>
    
    <item>
      <title>CVE-2020-9771 - mount_apfs TCC bypass and privilege escalation</title>
      <link>https://theevilbit.github.io/posts/cve_2020_9771/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/cve_2020_9771/</guid>
      <description>TL;DR Link to heading We could mount the entire file system through APFS snapshots as read-only, with the noowners flag, which enables us accessing (almost) every file in the file system, including data (documents, files, etc&amp;hellip;) of every user on the system, including those protected by Apple&amp;rsquo;s privacy framework (TCC). Even with the Guest account we could read files of admin accounts as Guest! ðŸ˜±
This could be achieved with a single command, for example: mount_apfs -o noowners -s com.</description>
    </item>
    
    <item>
      <title>TALK - Exploiting directory permissions on macOS</title>
      <link>https://theevilbit.github.io/posts/exploiting_directory_permissions_on_macos/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/exploiting_directory_permissions_on_macos/</guid>
      <description>This research started around summer time in 2019, when everything settled down after my talk in 2019, where I detailed how did I gained root privileges via a benign App Store application, that I developed. That exploit used a symlink to achieve this, so I though I will make a more general approach and see if this type of vulnerability exists in other places as well on macOS systems. As it turns out it does exists, and not just on macOS directly but also on other apps, it appears to be a very fruitful of issue, without too much effort I found 5 exploitable bugs on macOS, 3 in Adobe installers.</description>
    </item>
    
  </channel>
</rss>
